<?xml version="1.0" encoding="utf-8"?>
<!--
                                                                                     
 h       t     t                ::       /     /                     t             / 
 h       t     t                ::      //    //                     t            // 
 h     ttttt ttttt ppppp sssss         //    //  y   y       sssss ttttt         //  
 hhhh    t     t   p   p s            //    //   y   y       s       t          //   
 h  hh   t     t   ppppp sssss       //    //    yyyyy       sssss   t         //    
 h   h   t     t   p         s  ::   /     /         y  ..       s   t    ..   /     
 h   h   t     t   p     sssss  ::   /     /     yyyyy  ..   sssss   t    ..   /     
                                                                                     
	<https://y.st./>
	Copyright © 2018 Alex Yst <mailto:copyright@y.st>

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program. If not, see <https://www.gnu.org./licenses/>.
-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<base href="https://y.st./[TEMP]/[TEMP].xhtml"/>
		<title>Binary tree &lt;https://y.st./[TEMP]/[TEMP].xhtml&gt;</title>
		<link rel="icon" type="image/png" href="/link/CC_BY-SA_4.0/y.st./icon.png"/>
		<link rel="stylesheet" type="text/css" href="/link/main.css"/>
		<script type="text/javascript" src="/script/javascript.js"/>
		<meta name="viewport" content="width=device-width"/>
	</head>
	<body>
<nav>
</nav>
		<header>
			<h1>Binary tree</h1>
			<p>Written in <span title="Data Structures">CS 3303</span> by <a href="https://y.st./">Alexand(er|ra) Yst</a>, finalised on 2018-12-12</p>
		</header>
<section id="Unit5">
	<h2>Unit 5</h2>
	<p>
		Several of this week&apos;s assigned readings weren&apos;t actually available to be accessed:
	</p>
	<img src="https://my.uopeople.edu/draftfile.php/119878/user/draft/436056419/404_-_File_or_directory_not_found.~_again.png" alt="404 - File or directory not found." class="framed-centred-image" width="489" height="275"/>
	<img src="https://my.uopeople.edu/draftfile.php/119878/user/draft/436056419/Can_not_find_data_record_in_database_table_context..png" alt="Can not find data record in database table context." class="framed-centred-image" width="778" height="658"/>
	<img src="https://my.uopeople.edu/draftfile.php/119878/user/draft/436056419/Page_not_found.png" alt="Page not found" class="framed-centred-image" width="304" height="729"/>
	<img src="https://my.uopeople.edu/draftfile.php/119878/user/draft/436056419/Unable_to_connect.png" alt="Unable to connect" class="framed-centred-image" width="332" height="557"/>
	<p>
		The reading material for the week mentions that system languages allow applications to be developed more quickly than bare assembly language.
		They also allow easier <strong>*maintenance*</strong> too though.
		It&apos;s not just initial development time that matters.
		If the software is to survive, adapt, and evolve, the initial development will only be a part of the picture.
	</p>
	<p>
		That same article talks about how strong typing encourages incompatible interfaces, and how conversion code is needed to translate between data types when trying to combine things.
		That all makes sense.
		The thing there that caught my attention though it that it said this usually isn&apos;t an option, as most programs are distributed as sourceless binaries.
		It made me reflect a bit.
		I really do appreciate the availability of source code.
		All of the software I have on my computer, down to the very last system component has its full source code made available to the public.
		Not everyone lives that way though.
		In a world where proprietary software is considered the norm, most people don&apos;t have access to the source code of hardly anything on their system.
		MY computer&apos;s hardware no doubt has some embedded, sourceless binaries, such as ones to to make the hard drive function, but everything running on top of that can be edited and recompiled at any time.
		For people that want the freedom to modify what they like, my system, Debian, is truly a great option.
	</p>
	<p>
		Still, even with access to the source code of everything on your machine, modifying and recompiling things to fit them together is inconvenient.
		Scripting languages provide a better glue by not requiring modification to existing components.
	</p>
	<p>
		The article does make the point that one type of language doesn&apos;t replace another.
		It says scripting doesn&apos;t replace system languages, and the reverse is true as well.
		As for scripting replacing system languages, that wouldn&apos;t make much sense.
		Scripting languages must somehow be implemented, and they&apos;re usually implemented in a system language.
		But still, the point is that you&apos;ve got to choose the right tool for the job.
		A hand saw isn&apos;t a replacement for a hammer; both have their own purposes.
		Mainly though, between these two, it&apos;s a trade-off between efficiency of running the software and efficiency in developing and maintaining the software.
	</p>
	<p>
		I already know how write Linux shell scripts, I just don&apos;t like to do it, so I didn&apos;t get much out of that tutorial.
		For anything even remotely complex, shell scripting is very painful to work with.
		I also know how to use Python pretty well, though again, I prefer other languages.
		Python just has a bad attitude; I prefer languages that don&apos;t actively mock users.
		The <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> tutorial wasn&apos;t of any help either; <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> is an inconsistent language, but it&apos;s my native tongue, so I use it for nearly everything.
		That doesn&apos;t mean I think it&apos;s well-designed; I also use English for all written/spoken work, yet English is one, if not <strong>*the*</strong>, most broken natural languages.
		Still, I use <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> every day, so a beginners&apos; tutorial on the language isn&apos;t going to cover anything I don&apos;t already know.
	</p>
	<p>
		The Perl tutorial was much more useful to me.
		I&apos;ve been meaning to try learning Perl anyway.
		From the tutorial, I found Perl&apos;s syntax is very much like that of my native language, <abbr title="PHP: Hypertext Preprocessor">PHP</abbr>.
		Arrays are declared a bit differently though.
		When initialising the array, an <code>@</code> sigil is used instead of the usual <code>$</code> sigil used for variables.
		However, when retrieving or changing the value, you do use the usual <code>$</code> sigil.
		Two sigils are used to get the length of the array (<code>$#</code>), but the number returned is actually one less than the array length, which is very unintuitive.
		This results in the returned value being equal to the final key of the array, unless the array is empty, in which you get back <code>-1</code>.
		You can also use these sigils to set the number of values in the array.
		Instantiating a hash uses the <code>%</code> sigil, and accessing/setting values uses curly braces instead of square brackets.
		This is all well and good, but one thing presented confuses me.
		The tutorial says the different sigils offer different namespaces.
		If that&apos;s the case though, why is the <code>@</code> or <code>%</code> sigil used to create an array or a map, but the <code>$</code> sigil used to access the values in the created constructs?
		That doesn&apos;t sound like separate namespaces to me.
	</p>
</section>
		<hr/>
		<p>
			Copyright © 2018 Alex Yst;
			You may modify and/or redistribute this document under the terms of the <a rel="license" href="/license/gpl-3.0-standalone.xhtml"><abbr title="GNU&apos;s Not Unix">GNU</abbr> <abbr title="General Public License version Three or later">GPLv3+</abbr></a>.
			If for some reason you would prefer to modify and/or distribute this document under other free copyleft terms, please ask me via email.
			My address is in the source comments near the top of this document.
			This license also applies to embedded content such as images.
			For more information on that, see <a href="/en/a/licensing.xhtml">licensing</a>.
		</p>
		<p>
			<abbr title="World Wide Web Consortium">W3C</abbr> standards are important.
			This document conforms to the <a href="https://validator.w3.org./nu/?doc=https%3A%2F%2Fy.st.%2F%5BTEMP%5D%2F%5BTEMP%5D.xhtml"><abbr title="Extensible Hypertext Markup Language">XHTML</abbr> 5.2</a> specification and uses style sheets that conform to the <a href="http://jigsaw.w3.org./css-validator/validator?uri=https%3A%2F%2Fy.st.%2F%5BTEMP%5D%2F%5BTEMP%5D.xhtml"><abbr title="Cascading Style Sheets">CSS</abbr>3</a> specification.
		</p>
	</body>
</html>

