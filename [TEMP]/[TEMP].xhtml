<?xml version="1.0" encoding="utf-8"?>
<!--
                                                                                     
 h       t     t                ::       /     /                     t             / 
 h       t     t                ::      //    //                     t            // 
 h     ttttt ttttt ppppp sssss         //    //  y   y       sssss ttttt         //  
 hhhh    t     t   p   p s            //    //   y   y       s       t          //   
 h  hh   t     t   ppppp sssss       //    //    yyyyy       sssss   t         //    
 h   h   t     t   p         s  ::   /     /         y  ..       s   t    ..   /     
 h   h   t     t   p     sssss  ::   /     /     yyyyy  ..   sssss   t    ..   /     
                                                                                     
	<https://y.st./>
	Copyright Â© 2020 Alex Yst <mailto:copyright@y.st>

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program. If not, see <https://www.gnu.org./licenses/>.
-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<base href="https://y.st./[TEMP]/[TEMP].xhtml"/>
		<title>Practice Exercises 3.A, 3.B, 3.C, 3.D, and 3.E &lt;https://y.st./[TEMP]/[TEMP].xhtml&gt;</title>
		<link rel="icon" type="image/png" href="/link/CC_BY-SA_4.0/y.st./icon.png"/>
		<link rel="stylesheet" type="text/css" href="/link/main.css"/>
		<script type="text/javascript" src="/script/javascript.js"/>
		<meta name="viewport" content="width=device-width"/>
	</head>
	<body>
<nav>
</nav>
		<header>
			<h1>Practice Exercises 3.A, 3.B, 3.C, 3.D, and 3.E</h1>
			<p>Written in <span title="Artificial Intelligence">CS 4408</span> by <a href="https://y.st./">Alexand(er|ra) Yst</a>, finalised and <a href="https://y.st./en/coursework/CS4408/Practice_Exercises_3.A~_3.B~_3.C~_3.D~_and_3.E.xhtml">archived</a> on 2020-04-22</p>
		</header>
<h2>Part A: Reflection on <a href="http://aispace.org/exercises/exercise3-a-1.shtml">Practice Exercise 3.A</a></h2>
<p>
	For the first pair of locations I tried, I just got back an error message stating that no route between the two could be found.
	I figured the site was broken and wouldn&apos;t do anything useful until it got fixed.
	I tried again with another pair of locations though, and everything worked fine.
	This provided my first useful observation: at times, no route can be found between a given two points.
	All chooseable points on the map are obviously connected via the road network, but sometimes, it can be difficult for a robot to work out a route between the two.
	My guess is that the robot fell into a loop and timed out or something, as it did take a while for the route-not-found error message to show up.
	We need better algorithms for figuring out routes.
	It seems like A* should work just fine, but I&apos;m not sure if that&apos;s what the website is already using.
</p>
<p>
	My other main observation was that sometimes reaching the goal required moving further away from the goal first.
	The paths the robot took obviously couldn&apos;t be direct, because it had to follow the roads.
	However, on top of that, the best route wasn&apos;t always the most direct.
	My guess is that distance wasn&apos;t the only thing taken into account in the cost function.
	Though we were told not to mess with other options, I did notice that there was an option for preferring safer routes, and that option was checked by default.
	By not messing with other options, we kept that enabled.
	This probably added a higher cost to roads or sections of roads that are considered to be less safe for cyclists.
	For example, areas with high motor vehicle traffic and areas where muggings frequently occur may take on a higher cost, even if they&apos;re shorter.
</p>
<h2>Part B: Answering questions</h2>
<h3>What is meant by search algorithm completeness?</h3>
<p>
	If a search algorithm is complete, it means the search algorithm will always find at least one solution without requiring infinite time to do so.
	this means that if there&apos;s a solution to the problem, the algorithm is guaranteed to terminate.
</p>
<h3>What is meant by search algorithm optimality?</h3>
<p>
	If a search algorithm is optimal, it finds the optimal solution when it finds a solution at all.
	If a solution is returned, you know there is no better solution available.
</p>
<h3>What are the advantages of breadth-first search over depth-first search?</h3>
<p>
	A breadth-first search will return the solution that&apos;s closest (in number of hops, not in cost) to the starting point.
	This can be advantageous for certain types of problems.
	Additionally, a breadth-first search doesn&apos;t get caught in loops like a depth-first search does.
	This is because it doesn&apos;t focus on one single path, but on all branches of the search space.
	One single search path may be caught in a loop, but the other search paths will keep going, leading to a solution.
	While a depth-first search will get caught in a loop and not terminate, a breadth-first search will always find the solution if it exists, allowing it to terminate despite the presence of loops.
	A breadth-first search is complete, meaning it&apos;ll find the solution in a finite amount of time, and if the cost is the number of hops, it&apos;s also optimal.
</p>
<h3>What is the advantage of depth-first search over breadth-first search?</h3>
<p>
	A depth-first search is much simpler than a breadth-first search.
	It doesn&apos;t have to keep track of all the branches it&apos;s searching through, and only has to keep track of where it&apos;s currently searching.
	It can finish with and discard branches one at a time until it&apos;s searched the entire graph, as long as there are no loops.
</p>
<h3>Consider the search problem represented in <a href="http://www.aispace.org/exercises/exercise3-b-1.shtml">Practice Exercise 3.B</a>, where a is the start node and f is the goal node. Would you prefer depth-first search or breadth-first search for this problem? Why?</h3>
<p>
	We can see that the graph contains a loop.
	As discussed above, loops are very hazardous to depth-first search algorithms.
	To avoid complications, it&apos;d be easier to use a breadth-first search for this particular graph.
</p>
<h3>Which sequences of paths are explored by breadth-first search and depth-first search in this problem?</h3>
<p>
	In a breadth-first search, a would be expanded to reveal b and e.
	The frontier then consists of paths ab and ae.
	B would then be expanded to reach c and d.
	E would then be expanded to reveal the goal node, f.
	It wouldn&apos;t be noticed that the goal state had been reached just yet though.
	The frontier state would consist of abc, abd, and aef.
	Abc and abd would each be expanded, one at a time, making the frontier state consist of aef, abcb, abcd, abdb, and abdc.
	Finally, the aef path would be popped dequeued and selected as the goal state.
</p>
<p>
	The depth-first search instead gets caught in the loop.
	It travels from a to b, then from b to c.
	From there, it travels back to b, because it&apos;s a two-way path, and the loop is complete.
	The depth-first search just goes back and forth between b and c forever.
</p>
<h2>Part C: Answer questions</h2>
<h3>What is the distinction between informed and uninformed search?</h3>
<p>
	An informed search makes estimates about how to best reach the goal state using a heuristic function.
	An ininformed search simply searches blindly, not trying to reach anywhere in particular, until it finally happens to come across a goal state.
</p>
<h3>What is a heuristic?</h3>
<p>
	A heuristic is an estimate of how far a point is from the goal or how costly it will be to get from said point to the goal.
</p>
<h3>When is a heuristic admissible?</h3>
<p>
	As long as the heuristic doesn&apos;t overestimate, it&apos;s admissible.
	Underestimation is fine.
	Overestimation would lead to suboptimal solutions being accepted though.
</p>
<h3>A* can be seen as a combination of what two search strategies?</h3>
<p>
	As we saw in the discussion assignment this week, it&apos;s a combination of lowest-cost first and best-first searches.
</p>
<h3>Consider the search problem represented in the figure in <a href="http://www.aispace.org/exercises/exercise3-c-2.shtml">Practice Exercise 3.C</a>, where a is the start node and e is the goal node. The pair [f, h] at each node indicates the value of the f and h functions for the path ending at that node. Given this information, what is the cost of each arc? The cost &lt;a, c&gt; = 2 is given as a hint.</h3>
<ul>
	<li>
		&lt;a, b&gt; = 1
	</li>
	<li>
		&lt;b, d&gt; = 1
	</li>
	<li>
		&lt;a, c&gt; = 2
	</li>
	<li>
		&lt;c, e&gt; = 1
	</li>
	<li>
		&lt;c, f&gt; = 1
	</li>
</ul>
<h3>Is the heuristic function h admissible? Explain why or why not.</h3>
<p>
	No over-estimations are made, so h is admissible.
</p>
<h3>Trace A* on this problem. Show what paths are in the frontier at each step.</h3>
<ol start="0">
	<li>
		<ul>
			<li>
				a: 3
			</li>
		</ul>
	</li>
	<li>
		<ul>
			<li>
				a, b = 4
			</li>
			<li>
				a, c = 3
			</li>
		</ul>
	</li>
	<li>
		<ul>
			<li>
				a, b = 4
			</li>
			<li>
				a, c, e = 3
			</li>
			<li>
				a, c, f = 5
			</li>
		</ul>
	</li>
	<li>
		a, c, e is then checked, and found to be the goal state.
	</li>
</ol>
<h2>Part D: Strange file</h2>
<p>
	The instructions say to follow along with <a href="http://www.aispace.org/exercises/exercise3-d-1.shtml">Practice Exercise 3.D</a>.
	That exercise tells us to open a <code>.jnlp</code> file, which doesn&apos;t seem to run in Firefox.
	Instead, Firefox just tries to download it.
	I searched online to see what the file is, and it&apos;s supposed to tell the browser where to download a <abbr title="Java Archive">JAR</abbr> file and what class from the file to run.
	It&apos;s not something that can really be run locally; it <strong>*has*</strong> to be run in the Web browser, which isn&apos;t running the file.
	There&apos;s nothing I can do without help here that I don&apos;t have.
</p>
<p>
	That said, I can certainly compare my estimations as to how the various algorithms would work.
	In a depth-first search, a very long route to the destination would likely be found, if the robot didn&apos;t get caught in a loop and fail to return a solution at all.
	A breadth-first search would return the route with the fewest number of nodes.
	Nodes would likely refer to intersections, but it would depend on how the search space was coded.
	A lowest-cost-first search would likely return a path that was composed of a high number of low-cost edges, if it returned a path at all.
	A*, on the other hand, would return the shortest path.
	To answer the final question posed by the page, I&apos;d prefer to use A*.
	I bike everywhere I need to get.
	If I&apos;m just biking for fun, I won&apos;t use a planner, and will just go wherever.
	When I use a cycling planner, I&apos;m usually trying to get somewhere very specific in an area I&apos;m not familiar with.
	I want to take the shortest route I can, and I want to actually get there instead of travelling in an endless loop.
	A* provides both of these features.
</p>
<h2>Part E: Answering questions</h2>
<h3>In branch and bound, how is the upper bound calculated?</h3>
<p>
	To start with, the upper bound is infinite.
	Once the first solution is found, the cost of that solution becomes the upper bound.
	As new solutions are found, their costs are compared to the then-current upper bound, and if a given solution has a lower cost, that solution&apos;s cost becomes the new upper bound, so the upper bound is always the cost of the cheapest solution found so far.
</p>
<h3>How is the lower bound calculated for a path?</h3>
<p>
	The lower bound is calculated as the cost of the path found so far plus the estimated cost (heuristic) for the rest of the path.
	If the heuristic is admissible, the lower bound will be no less than the actual cost of the path.
</p>
<h3>With branch and bound, when do we prune a path?</h3>
<p>
	When the lower bound of a path exceeds the upper bound for the problem so far, the path is pruned, because it can&apos;t possibly provide a better solution than what we&apos;ve already got.
	There&apos;s no point in expanding that path any further.
</p>
<h3>What is the upper bound when only the start node has been explored?</h3>
<p>
	When the start node is the only one explored so far, we haven&apos;t yet found any solutions.
	As such, the upper bound is still infinite.
</p>
<h3>Which goal node is found first by branch and bound in the graph of <a href="http://www.aispace.org/exercises/exercise3-e-1.shtml">Practice Exercise 3.E</a>?</h3>
<p>
	The goal at f would be found first.
	The goal at j is just estimated to be too far away.
	The goal at f turns out to be the best goal anyway though, with a cost of only 3, compared to j&apos;s cost of 5.
</p>
<h3>What is the upper bound immediately after the first goal node is found?</h3>
<p>
	After the first goal is found, the upper bound becomes the cost of reaching that goal.
	As mentioned above, that cost is 3, so the upper bound becomes 3.
</p>
<h3>Is the second goal found by branch and bound?</h3>
<p>
	The second goal isn&apos;t found.
	Its estimated cost is too high after finding the first goal, so its branch gets pruned.
</p>
		<hr/>
		<p>
			Copyright Â© 2020 Alex Yst;
			You may modify and/or redistribute this document under the terms of the <a rel="license" href="/license/gpl-3.0-standalone.xhtml"><abbr title="GNU&apos;s Not Unix">GNU</abbr> <abbr title="General Public License version Three or later">GPLv3+</abbr></a>.
			If for some reason you would prefer to modify and/or distribute this document under other free copyleft terms, please ask me via email.
			My address is in the source comments near the top of this document.
			This license also applies to embedded content such as images.
			For more information on that, see <a href="/en/a/licensing.xhtml">licensing</a>.
		</p>
		<p>
			<abbr title="World Wide Web Consortium">W3C</abbr> standards are important.
			This document conforms to the <a href="https://validator.w3.org./nu/?doc=https%3A%2F%2Fy.st.%2F%5BTEMP%5D%2F%5BTEMP%5D.xhtml"><abbr title="Extensible Hypertext Markup Language">XHTML</abbr> 5.2</a> specification and uses style sheets that conform to the <a href="http://jigsaw.w3.org./css-validator/validator?uri=https%3A%2F%2Fy.st.%2F%5BTEMP%5D%2F%5BTEMP%5D.xhtml"><abbr title="Cascading Style Sheets">CSS</abbr>3</a> specification.
		</p>
	</body>
</html>

