<?xml version="1.0" encoding="utf-8"?>
<!--
                                                                                     
 h       t     t                ::       /     /                     t             / 
 h       t     t                ::      //    //                     t            // 
 h     ttttt ttttt ppppp sssss         //    //  y   y       sssss ttttt         //  
 hhhh    t     t   p   p s            //    //   y   y       s       t          //   
 h  hh   t     t   ppppp sssss       //    //    yyyyy       sssss   t         //    
 h   h   t     t   p         s  ::   /     /         y  ..       s   t    ..   /     
 h   h   t     t   p     sssss  ::   /     /     yyyyy  ..   sssss   t    ..   /     
                                                                                     
	<https://y.st./>
	Copyright Â© 2019 Alex Yst <mailto:copyright@y.st>

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program. If not, see <https://www.gnu.org./licenses/>.
-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<base href="https://y.st./[TEMP]/[TEMP].xhtml"/>
		<title>Object-oriented analysis &lt;https://y.st./[TEMP]/[TEMP].xhtml&gt;</title>
		<link rel="icon" type="image/png" href="/link/CC_BY-SA_4.0/y.st./icon.png"/>
		<link rel="stylesheet" type="text/css" href="/link/main.css"/>
		<script type="text/javascript" src="/script/javascript.js"/>
		<meta name="viewport" content="width=device-width"/>
	</head>
	<body>
<nav>
</nav>
		<header>
			<h1>Object-oriented analysis</h1>
			<p>Written in <span title="Software Engineering 2">CS 4403</span> by <a href="https://y.st./">Alexand(er|ra) Yst</a>, finalised and <a href="https://y.st./en/coursework/CS4403/Object-oriented_analysis.xhtml">archived</a> on 2019-12-18</p>
		</header>
<p>
	This week, we&apos;re performing an object-oriented analysis of one of the example problems from the textbook.
	In my submission, I&apos;ll be working with the problem of the university course registration system.
</p>
<h2>Summary paragraph</h2>
<ol start="0">
	<li>
		<u>Students</u> (fill out) <u>registration paperwork</u> and either (mail) <u>it</u> to the <u>registrar&apos;s office</u> or (deliver) <u>it</u> by hand.
	</li>
	<li>
		The <u>registrar&apos;s clerk</u> (enters) the <u>data</u> from the <u>paperwork</u> into the <u>system</u>.
	</li>
	<li>
		The <u>accounts receivable subsystem</u> is (queried) to see if the <u>student</u> (owes) <u>fees</u> from the <u>previous term</u>; if <u>fees</u> are (owed), a <u>bill</u> is (sent) to the <u>student</u> as <u>part</u> of a <u>denial letter</u>.
	</li>
	<li>
		The <u>system</u> (checks) the <u>student&apos;s transcript</u> to see if the <u>student</u> has (completed) the <u>prerequisites for the course</u>; if the <u>prerequisites</u> aren&apos;t met, a <u>denial letter</u> listing the <u>prerequisites</u> is (sent) to the <u>student</u>.
	</li>
	<li>
		The <u>system</u> (checks) the <u>course</u> for <u>open seats</u>; if none are available, a <u>denial letter</u> saying the <u>course</u> is closed is (sent) to the <u>student</u>.
	</li>
	<li>
		If all three <u>checks</u> (come back clear), the <u>student&apos;s Social Security number</u> is (added) to the <u>class roster</u>; an <u>acknowledgement</u> including the <u>day</u>, <u>time</u>, <u>room</u>, and <u>new tuition owed</u> is (sent) to the <u>student</u>, and the <u>tuition due</u> is (relayed) to the <u>accounts receivable subsystem</u>.
	</li>
	<li>
		The <u>system</u> (sends) <u>enrolment reports</u> to the <u>instructors</u>.
	</li>
</ol>
<h2>Objects of interest</h2>
<h3>List of nouns</h3>
<ol start="0">
	<li>
		Students
	</li>
	<li>
		<del>registration paperwork</del> (problem space)
	</li>
	<li>
		<del>registrar&apos;s office</del> (problem space)
	</li>
	<li>
		<del>it</del> = registration paperwork
	</li>
	<li>
		registrar&apos;s clerk
	</li>
	<li>
		<del>data</del> (problem space)
	</li>
	<li>
		<del>paperwork</del> = registration paperwork
	</li>
	<li>
		system
	</li>
	<li>
		accounts receivable subsystem
	</li>
	<li>
		student = Students
	</li>
	<li>
		<del>fees</del> (data held in the accounts receivable subsystem)
	</li>
	<li>
		<del>previous term</del> (not really an object, but a time frame for which fees are checked against)
	</li>
	<li>
		<del>bill</del> (problem space)
	</li>
	<li>
		<del>part</del> (only part of an object)
	</li>
	<li>
		<del>denial letter</del> (problem space)
	</li>
	<li>
		<del>student&apos;s transcript</del> (make an attribute of student)
	</li>
	<li>
		<del>prerequisites for the course</del> (make an attribute of course)
	</li>
	<li>
		prerequisites = prerequisites for the course
	</li>
	<li>
		course
	</li>
	<li>
		<del>open seats</del> (make an attribute of course)
	</li>
	<li>
		<del>checks</del> (refers to multiple objects)
	</li>
	<li>
		<del>student&apos;s Social Security number</del> (make an attribute of student)
	</li>
	<li>
		<del>class roster</del> (make an attribute of course)
	</li>
	<li>
		<del>acknowledgement</del> (problem space)
	</li>
	<li>
		<del>day</del> (make an attribute of course)
	</li>
	<li>
		<del>time</del> (make an attribute of course)
	</li>
	<li>
		<del>room</del> (make an attribute of course)
	</li>
	<li>
		<del>new tuition owed</del> (problem space)
	</li>
	<li>
		<del>tuition due</del> = new tuition owed
	</li>
	<li>
		<del>enrolment reports</del> (problem space)
	</li>
	<li>
		<del>instructors</del> (make an attribute of course)
	</li>
</ol>
<h3>Named system objects</h3>
<ol start="0">
	<li>
		<code>student</code>
		<ol start="0">
			<li>
				<code>Social_Security_number</code>
			</li>
			<li>
				<code>transcript</code>
			</li>
		</ol>
	</li>
	<li>
		<code>clerk</code>
	</li>
	<li>
		<code>system</code>
	</li>
	<li>
		<code>accounts_receivable_subsystem</code>
	</li>
	<li>
		<code>course</code>
		<ol start="0">
			<li>
				<code>prerequisites</code>
			</li>
			<li>
				<code>seats_available</code>
			</li>
			<li>
				<code>roster</code>
			</li>
			<li>
				<code>day</code>
			</li>
			<li>
				<code>time</code>
			</li>
			<li>
				<code>room</code>
			</li>
			<li>
				<code>instructor</code>
			</li>
		</ol>
	</li>
</ol>
<h2>List of verbs (with contexts)</h2>
<ol start="0">
	<li>
		<del>Students fill out registration paperwork</del> (physical action)
	</li>
	<li>
		<del>[students] mail [registration paperwork]</del> (physical action)
	</li>
	<li>
		<del>[students] deliver [registration paperwork]</del> (physical action)
	</li>
	<li>
		registrar&apos;s clerk enters the data
	</li>
	<li>
		accounts receivable subsystem is queried
	</li>
	<li>
		student owes fees
	</li>
	<li>
		<del>if fees are owed</del> (duplicate of above)
	</li>
	<li>
		bill is sent to the student
	</li>
	<li>
		system checks the student&apos;s transcript
	</li>
	<li>
		<del>student has completed the prerequisites for the course</del> (duplicate of the item above)
	</li>
	<li>
		denial letter listing the prerequisites is sent to the student
	</li>
	<li>
		system checks the course for open seats
	</li>
	<li>
		denial letter [...] is sent to the student
	</li>
	<li>
		checks come back clear, the student&apos;s Social Security number is added to the class roster
	</li>
	<li>
		acknowledgement [...] is sent to the student
	</li>
	<li>
		tuition due is relayed to the accounts receivable subsystem
	</li>
	<li>
		The system sends enrolment reports
	</li>
</ol>
<h2>Table of processes</h2>
<table>
	<tr>
		<th>
			Verb
		</th>
		<th>
			Space
		</th>
		<th>
			Process
		</th>
		<th>
			Object
		</th>
	</tr>
	<tr>
		<td>
			enters
		</td>
		<td>
			solution
		</td>
		<td>
			<code>register</code>
		</td>
		<td>
			<code>system</code>
		</td>
	</tr>
	<tr>
		<td>
			queried
		</td>
		<td>
			solution
		</td>
		<td>
			<code>get_student_fees</code>
		</td>
		<td>
			<code>accounts_receivable_subsystem</code>
		</td>
	</tr>
	<tr>
		<td>
			owes
		</td>
		<td>
			solution
		</td>
		<td>
			<code>has_past_due_fees</code>
		</td>
		<td>
			<code>student</code>
		</td>
	</tr>
	<tr>
		<td>
			is sent
		</td>
		<td>
			solution
		</td>
		<td>
			<code>print_bill</code>
		</td>
		<td>
			<code>student</code>
		</td>
	</tr>
	<tr>
		<td>
			has completed
		</td>
		<td>
			solution
		</td>
		<td>
			<code>has_passed_course</code>
		</td>
		<td>
			<code>student</code>
		</td>
	</tr>
	<tr>
		<td>
			is sent
		</td>
		<td>
			solution
		</td>
		<td>
			<code>print_prerequisite_list</code>
		</td>
		<td>
			<code>student</code>
		</td>
	</tr>
	<tr>
		<td>
			checks
		</td>
		<td>
			solution
		</td>
		<td>
			<code>has_openings</code>
		</td>
		<td>
			<code>course</code>
		</td>
	</tr>
	<tr>
		<td>
			is sent
		</td>
		<td>
			solution
		</td>
		<td>
			<code>print_course_full_denial</code>
		</td>
		<td>
			<code>student</code>
		</td>
	</tr>
	<tr>
		<td>
			is added
		</td>
		<td>
			solution
		</td>
		<td>
			<code>add_student</code>
		</td>
		<td>
			<code>class</code>
		</td>
	</tr>
	<tr>
		<td>
			is sent
		</td>
		<td>
			solution
		</td>
		<td>
			<code>print_acknowledgement</code>
		</td>
		<td>
			<code>student</code>
		</td>
	</tr>
	<tr>
		<td>
			is relayed
		</td>
		<td>
			solution
		</td>
		<td>
			<code>add_fee</code>
		</td>
		<td>
			<code>accounts_receivable_subsystem</code>
		</td>
	</tr>
	<tr>
		<td>
			send
		</td>
		<td>
			solution
		</td>
		<td>
			<code>print_enrolment_report</code>
		</td>
		<td>
			<code>course</code>
		</td>
	</tr>
</table>
<h2>Table of object attributes</h2>
<table>
	<tr>
		<th>
			Class
		</th>
		<th>
			Attributes
		</th>
		<th>
			Notes
		</th>
	</tr>
	<tr>
		<td>
			<code>student</code>
		</td>
		<td>
			<code>Social_Security_number</code>, <code>transcript</code>
		</td>
		<td>
			<code>transcript</code> is a bit complex, and may need to be broken into multiple attributes, or perhaps a second object.
		</td>
	</tr>
	<tr>
		<td>
			<code>clerk</code>
		</td>
		<td>
			<em>(none)</em>
		</td>
		<td>
			This object represents the account used to enter system information, hence its lack of attributes.
			It&apos;s definitely a system object, but I&apos;m not sure how we deal with it at the moment.
		</td>
	</tr>
	<tr>
		<td>
			<code>system</code>
		</td>
		<td>
			<em>(none)</em>
		</td>
		<td>
			This is the main system and takes data from <code>clerk</code>.
			Perhaps it should be simplified into a data-entry class and renamed?
		</td>
	</tr>
	<tr>
		<td>
			<code>accounts_receivable_subsystem</code>
		</td>
		<td>
			<em>(none)</em>
		</td>
		<td>
			The problem specifications specifically indicate that we are to get certain information from and send certain information to the accounts receivable subsystem.
			I imagine this is some sort of database outside the control of the system we are to build.
			It&apos;s very much an object in the system, as we definitely need to interact with it, but it has no attributes because we can only call its methods and use their output.
			The actual data the accounts receivable subsystem has is unknown to us, and the accounts receivable subsystem is just a black box, as far as we can tell.
		</td>
	</tr>
	<tr>
		<td>
			<code>course</code>
		</td>
		<td>
			<code>prerequisites</code>, <code>seats_available</code>, <code>roster</code>, <code>day</code>, <code>time</code>, <code>room</code>, <code>instructor</code>
		</td>
		<td>
			<code>roster</code> seems complex, as it holds multiple pieces of data (multiple Social Security numbers), but realistically, we can represent it with a basic array held by a single attribute.
		</td>
	</tr>
</table>
<h2>Table of process attributes</h2>
<table>
	<tr>
		<th>
			Process
		</th>
		<th>
			Attributes
		</th>
	</tr>
	<tr>
		<td>
			<code>register</code>
		</td>
		<td>
			This process is how the clerk enters a registration request.
			All other processes aside from <code>print_enrolment_report</code> are called by this process as subprocesses.
		</td>
	</tr>
	<tr>
		<td>
			<code>get_student_fees</code>
		</td>
		<td>
			<em>(none)</em>
		</td>
	</tr>
	<tr>
		<td>
			<code>has_past_due_fees</code>
		</td>
		<td>
			<em>(none)</em>
		</td>
	</tr>
	<tr>
		<td>
			<code>print_bill</code>
		</td>
		<td>
			Only used if <code>has_past_due_fees</code> returns true, and uses the output of <code>get_student_fees</code>.
		</td>
	</tr>
	<tr>
		<td>
			<code>has_passed_course</code>
		</td>
		<td>
			<em>(none)</em>
		</td>
	</tr>
	<tr>
		<td>
			<code>print_prerequisite_list</code>
		</td>
		<td>
			Only used if <code>has_passed_course</code> returns false for one or more of the prerequisite courses.
		</td>
	</tr>
	<tr>
		<td>
			<code>has_openings</code>
		</td>
		<td>
			<em>(none)</em>
		</td>
	</tr>
	<tr>
		<td>
			<code>print_course_full_denial</code>
		</td>
		<td>
			Only used if <code>has_openings</code> returns false
		</td>
	</tr>
	<tr>
		<td>
			<code>add_student</code>
		</td>
		<td>
			Only used if <code>has_openings</code> returns true
		</td>
	</tr>
	<tr>
		<td>
			<code>print_acknowledgement</code>
		</td>
		<td>
			Only used if <code>has_past_due_fees</code> returns false, <code>has_passed_course</code> has returned true for every prerequisite course, and <code>has_openings</code> returned true.
		</td>
	</tr>
	<tr>
		<td>
			<code>add_fee</code>
		</td>
		<td>
			Only used if <code>has_past_due_fees</code> returns false, <code>has_passed_course</code> has returned true for every prerequisite course, and <code>has_openings</code> returned true.
		</td>
	</tr>
	<tr>
		<td>
			<code>print_enrolment_report</code>
		</td>
		<td>
			Performed after the registration period has closed; should probably print from the instructors&apos; printers, not from the registrar&apos;s office printer.
		</td>
	</tr>
</table>
<h2>Diagrams</h2>
<p>
	I&apos;m sorry, but I&apos;m not sure what software we&apos;re expected to draw these diagrams in.
	I&apos;ve been using Dia up until now, but now we&apos;re required to make the objects have shaded, rounded rectangles around unshaded, rounded rectangles.
	This bizarrely-specific requirement is too complex for Dia.
	If you have any suggestions as to what type of software can handle the new charts, I&apos;ll do better next time and include the diagrams.
</p>
		<hr/>
		<p>
			Copyright Â© 2019 Alex Yst;
			You may modify and/or redistribute this document under the terms of the <a rel="license" href="/license/gpl-3.0-standalone.xhtml"><abbr title="GNU&apos;s Not Unix">GNU</abbr> <abbr title="General Public License version Three or later">GPLv3+</abbr></a>.
			If for some reason you would prefer to modify and/or distribute this document under other free copyleft terms, please ask me via email.
			My address is in the source comments near the top of this document.
			This license also applies to embedded content such as images.
			For more information on that, see <a href="/en/a/licensing.xhtml">licensing</a>.
		</p>
		<p>
			<abbr title="World Wide Web Consortium">W3C</abbr> standards are important.
			This document conforms to the <a href="https://validator.w3.org./nu/?doc=https%3A%2F%2Fy.st.%2F%5BTEMP%5D%2F%5BTEMP%5D.xhtml"><abbr title="Extensible Hypertext Markup Language">XHTML</abbr> 5.2</a> specification and uses style sheets that conform to the <a href="http://jigsaw.w3.org./css-validator/validator?uri=https%3A%2F%2Fy.st.%2F%5BTEMP%5D%2F%5BTEMP%5D.xhtml"><abbr title="Cascading Style Sheets">CSS</abbr>3</a> specification.
		</p>
	</body>
</html>

