<?xml version="1.0" encoding="utf-8"?>
<!--
                                                                                     
 h       t     t                ::       /     /                     t             / 
 h       t     t                ::      //    //                     t            // 
 h     ttttt ttttt ppppp sssss         //    //  y   y       sssss ttttt         //  
 hhhh    t     t   p   p s            //    //   y   y       s       t          //   
 h  hh   t     t   ppppp sssss       //    //    yyyyy       sssss   t         //    
 h   h   t     t   p         s  ::   /     /         y  ..       s   t    ..   /     
 h   h   t     t   p     sssss  ::   /     /     yyyyy  ..   sssss   t    ..   /     
                                                                                     
	<https://y.st./>
	Copyright Â© 2019 Alex Yst <mailto:copyright@y.st>

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program. If not, see <https://www.gnu.org./licenses/>.
-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<base href="https://y.st./[TEMP]/[TEMP].xhtml"/>
		<title>Linear regression &lt;https://y.st./[TEMP]/[TEMP].xhtml&gt;</title>
		<link rel="icon" type="image/png" href="/link/CC_BY-SA_4.0/y.st./icon.png"/>
		<link rel="stylesheet" type="text/css" href="/link/main.css"/>
		<script type="text/javascript" src="/script/javascript.js"/>
		<meta name="viewport" content="width=device-width"/>
	</head>
	<body>
<nav>
</nav>
		<header>
			<h1>Linear regression</h1>
			<p>Written in <span title="Data Mining and Machine Learning">CS 4407</span> by <a href="https://y.st./">Alexand(er|ra) Yst</a>, finalised on 2019-02-20</p>
		</header>
<section id="Unit3">
	<h2>Unit 3</h2>
	<p>
		The reading assignment for the week was as follows:
	</p>
	<ul>
		<li>
			<a href="https://secure.php.net/manual/en/introduction.php">PHP: Introduction - Manual</a>
		</li>
		<li>
			<a href="https://www.w3schools.com/php/php_intro.asp">PHP 5 Introduction</a>
		</li>
		<li>
			<a href="https://www.wired.com/2010/02/PHP_Tutorial_for_Beginners/#The_Basics">The Basics</a>
		</li>
	</ul>
	<p>
		The assignment for the week was on a third-party website.
		This was a bit problematic, as signing up for an account on that website required the completion of one of those obnoxious Google reCAPTCHA <abbr title="Completely Automated Public Turing test to tell Computers and Humans Apart">CAPTCHA</abbr>s.
		Google is always a pain, and this time, Google was refusing to sent the <abbr title="Completely Automated Public Turing test to tell Computers and Humans Apart">CAPTCHA</abbr> on the grounds that Google thought I might be a robot.
		Seriously?
		Isn&apos;t the <abbr title="Completely Automated Public Turing test to tell Computers and Humans Apart">CAPTCHA</abbr> supposed to be my way to prove that I&apos;m not?
		What&apos;s the point of a <abbr title="Completely Automated Public Turing test to tell Computers and Humans Apart">CAPTCHA</abbr> if you only send it to people you <strong>*don&apos;t*</strong> think are robots?
		Google&apos;s got problems.
		This isn&apos;t the first time Google has hassled me though, or even the first time they&apos;ve hassled me in this particular way, so I knew they&apos;d send me the <abbr title="Completely Automated Public Turing test to tell Computers and Humans Apart">CAPTCHA</abbr> to fill out if I left and waited long enough, then came back later.
		Sure enough, I tried again later, and they sent me thirteen <abbr title="Completely Automated Public Turing test to tell Computers and Humans Apart">CAPTCHA</abbr>s in a row to fill out.
		It&apos;s not uncommon for them to send me about twenty before they&apos;ll let me through, and it&apos;s not unheard of for them to send me upwards of thirty.
		It&apos;s become a bit of a game for me: I count how many <abbr title="Completely Automated Public Turing test to tell Computers and Humans Apart">CAPTCHA</abbr>s Google makes me fill out this time, and see just how badly Google wants annoy me today.
	</p>
	<p>
		<del>The website with the lessons claims that <code>echo</code> is a function.
		This actually isn&apos;t true, as can be verified in the <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> manual.
		Instead, <code>echo</code> is one of the basic language constructs, though it can be called like a function syntactically.
		However, the lesson website then proceeds to show an example using <code>echo</code> that <strong>*doesn&apos;t*</strong> call it as a function.
		Take the following pseudocode:</del>
	</p>
	<blockquote>
		<p>
			<code>function_name &apos;argument&apos;;</code>
		</p>
	</blockquote>
	<p>
		<del>This is <strong>*not*</strong> valid in <abbr title="PHP: Hypertext Preprocessor">PHP</abbr>.
		Instead, you need to use:</del>
	</p>
	<blockquote>
		<p>
			<code>function_name(&apos;argument&apos;);</code>
		</p>
	</blockquote>
	<p>
		<del>However, the website uses <code>echo &apos;argument&apos;;</code>.
		This is of course valid code, but is <strong>*not*</strong> a valid function call, meaning that <code>echo</code> <strong>*cannot*</strong> be and <strong>*is not*</strong> a function.</del>
	</p>
	<p>
		<ins>Actually, scratch all that.
		In a later lesson, the site admits <code>echo</code> isn&apos;t a function, and even brings up the same point as I did about the lack of parentheses.
		Why give us invalid information, just to later correct it?
		Why knowingly give us invalid information in the first place?
		Sheesh.</ins>
	</p>
	<p>
		The website also teaches us that variable names can only contain alphanumeric characters and underscores.
		This is actually untrue as well.
		Within the <abbr title="American Standard Code for Information Interchange">ASCII</abbr> range, these are the only characters allowed.
		However, <strong>*all characters outside the <abbr title="American Standard Code for Information Interchange">ASCII</abbr> range*</strong> are also available for use in variable names.
		Again, this is something the <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> manual teaches you right away.
		In practice, most people stick to the <abbr title="American Standard Code for Information Interchange">ASCII</abbr> range when naming variables, but this should never be considered a hard requirement.
		Personally, prefix my variable names with a cent sign if the variable contains a closure.
		The only time I use closures is when I need to reuse code but I can&apos;t generalise the code enough to warrant a first class function.
		This is code no one else needs to call, so no one else will need to type this symbol later.
		Using the strange symbol allows me to put it into a separate pseudonamespace.
		I used a funny character in an actual <code>namespace</code> once too, for a class that should never be touched by code outside my own library.
		The class basically was a workaround for the fact that a feature I needed wasn&apos;t present in old versions of <abbr title="PHP: Hypertext Preprocessor">PHP</abbr>, but had just been added to the cutting-edge release.
		In other words, these characters are available for use in all symbol names, not just variable names.
		I wouldn&apos;t recommend using them in most cases, but they are very useful to have sometimes.
	</p>
	<p>
		Next, we&apos;re introduced to the <code>define()</code> function.
		Like the lesson says, <code>define()</code> defines constants.
		However, the <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> manual will tell you that it&apos;s not the <strong>*preferred*</strong> method of defining constants.
		The <code>cont</code> keyword is better for a few reasons.
		I forget all the reasons, but one reason is because the <code>const</code> keyword runs faster than the <code>define()</code> function.
		This may be because <code>const</code> does its thing at compile time, while <code>define()</code> waits until run time.
		If you need to define a constant conditionally and/or in terms of some variable, <code>define()</code> is your only option.
		For all other cases, use <code>const</code> instead.
	</p>
	<p>
		It drives me batty when modulus division is described as a finding of the &quot;remainder&quot;.
		When dividing, there <strong>*is no remainder*</strong>.
		Five divided by two is <strong>*not*</strong> two remainder one.
		It&apos;s two and a half.
		Modulo division is more like overflow, in how it works.
		Take a two-bit, unsigned integer, for example.
		There are four possible values, so if you store a value in such a space, your result is the value you attempted to store, but modulo 4.
		This shows us too that as <code>4</code> gets stored as <code>0x00</code>, a number modulo itself is zero.
		Modulus division doesn&apos;t have to involve powers of two, obviously.
		Powers of two just make the point easy to explain to computer science majors.
		If you have fifteen modulo ten, it just means you&apos;re trying to find the result you&apos;d get from trying to store fifteen in a space that has only ten values.
		Nine, zero (because of roll over), one, two, three, four, five.
		So you end up with a result of five.
		Dealing with negative numbers in modulus division is undefined, so you get different results depending on how modulus division is implemented in the environment you&apos;re working in.
		However, when working with only positive numbers, you get the same results when you look at modulus as roll over as when you look at it as &quot;remainders&quot;.
		So I guess, do it whatever way makes it easy for you.
		However, when you <strong>*talk*</strong> about modulus being a finding of &quot;remainders&quot;, it makes you look like the type of idiot that doesn&apos;t know how to find fractions or decimals when dividing.
		It makes you look too stupid to figure out that there doesn&apos;t need to be &quot;leftovers&quot; just because something doesn&apos;t divide <strong>*evenly*</strong>.
	</p>
	<p>
		The quiz for the week startled me a bit.
		The first question asked what command you use to compile code.
		The next was asking about how to change the working directory on a Linux system.
		What?
		I didn&apos;t even remember studying those things in this course, though I&apos;ve used the <code>make</code> and <code>cd</code> commands countless times on my Debian system, so I knew the answers.
		And isn&apos;t this a course about Web development?
		Compiling code and changing the working directory are things you do locally, not in regards to websites.
		What else did I miss, that maybe I <strong>*didn&apos;t*</strong> just happen to know because of my personal situation?
		After a bit, it struck me: we were supposed to read about how to compile Apache and <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> from source last week.
		I sort of skipped that part of the reading material, due to already having compiled both <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> and Apache from source a few times.
		The material would have definitely used the <code>make</code> command, and would have used the <code>cd</code> command a few times.
		So I&apos;m still up to speed on things.
	</p>
	<p>
		I don&apos;t think most people in this course ever think about accessibility, let along care about it.
		I mean, most Web developers certainly don&apos;t.
		There is one student I&apos;ve been conversing with, even outside of class a bit, who seems intelligent and always has an insightful take on the discussion assignments.
		And this week, I learned that they&apos;ve been formatting their discussion posts with accessibility in mind.
		I&apos;ve picked up a new trick to better format my own posts.
		I suppose it won&apos;t matter for in-discussion, as again, most everyone doesn&apos;t care.
		But my discussion posts are also archived in my public journal.
		(Due to censorship from the school, all such journal entries aren&apos;t visible to the public until 2023.)
		The better my posts are formatted for the discussion assignments, the better they&apos;ll be formatted in my journal.
	</p>
</section>
<section id="Unit3">
	<h2>Unit 3</h2>
	<p>
		The reading assignment for the week was as follows:
	</p>
	<ul>
		<li>
			<a href="https://secure.php.net/manual/en/introduction.php">PHP: Introduction - Manual</a>
		</li>
		<li>
			<a href="https://www.w3schools.com/php/php_intro.asp">PHP 5 Introduction</a>
		</li>
		<li>
			<a href="https://www.wired.com/2010/02/PHP_Tutorial_for_Beginners/#The_Basics">The Basics</a>
		</li>
	</ul>
	<p>
		The assignment for the week was on a third-party website.
		This was a bit problematic, as signing up for an account on that website required the completion of one of those obnoxious Google reCAPTCHA <abbr title="Completely Automated Public Turing test to tell Computers and Humans Apart">CAPTCHA</abbr>s.
		Google is always a pain, and this time, Google was refusing to sent the <abbr title="Completely Automated Public Turing test to tell Computers and Humans Apart">CAPTCHA</abbr> on the grounds that Google thought I might be a robot.
		Seriously?
		Isn&apos;t the <abbr title="Completely Automated Public Turing test to tell Computers and Humans Apart">CAPTCHA</abbr> supposed to be my way to prove that I&apos;m not?
		What&apos;s the point of a <abbr title="Completely Automated Public Turing test to tell Computers and Humans Apart">CAPTCHA</abbr> if you only send it to people you <strong>*don&apos;t*</strong> think are robots?
		Google&apos;s got problems.
		This isn&apos;t the first time Google has hassled me though, or even the first time they&apos;ve hassled me in this particular way, so I knew they&apos;d send me the <abbr title="Completely Automated Public Turing test to tell Computers and Humans Apart">CAPTCHA</abbr> to fill out if I left and waited long enough, then came back later.
		Sure enough, I tried again later, and they sent me thirteen <abbr title="Completely Automated Public Turing test to tell Computers and Humans Apart">CAPTCHA</abbr>s in a row to fill out.
		It&apos;s not uncommon for them to send me about twenty before they&apos;ll let me through, and it&apos;s not unheard of for them to send me upwards of thirty.
		It&apos;s become a bit of a game for me: I count how many <abbr title="Completely Automated Public Turing test to tell Computers and Humans Apart">CAPTCHA</abbr>s Google makes me fill out this time, and see just how badly Google wants annoy me today.
	</p>
	<p>
		<del>The website with the lessons claims that <code>echo</code> is a function.
		This actually isn&apos;t true, as can be verified in the <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> manual.
		Instead, <code>echo</code> is one of the basic language constructs, though it can be called like a function syntactically.
		However, the lesson website then proceeds to show an example using <code>echo</code> that <strong>*doesn&apos;t*</strong> call it as a function.
		Take the following pseudocode:</del>
	</p>
	<blockquote>
		<p>
			<code>function_name &apos;argument&apos;;</code>
		</p>
	</blockquote>
	<p>
		<del>This is <strong>*not*</strong> valid in <abbr title="PHP: Hypertext Preprocessor">PHP</abbr>.
		Instead, you need to use:</del>
	</p>
	<blockquote>
		<p>
			<code>function_name(&apos;argument&apos;);</code>
		</p>
	</blockquote>
	<p>
		<del>However, the website uses <code>echo &apos;argument&apos;;</code>.
		This is of course valid code, but is <strong>*not*</strong> a valid function call, meaning that <code>echo</code> <strong>*cannot*</strong> be and <strong>*is not*</strong> a function.</del>
	</p>
	<p>
		<ins>Actually, scratch all that.
		In a later lesson, the site admits <code>echo</code> isn&apos;t a function, and even brings up the same point as I did about the lack of parentheses.
		Why give us invalid information, just to later correct it?
		Why knowingly give us invalid information in the first place?
		Sheesh.</ins>
	</p>
	<p>
		The website also teaches us that variable names can only contain alphanumeric characters and underscores.
		This is actually untrue as well.
		Within the <abbr title="American Standard Code for Information Interchange">ASCII</abbr> range, these are the only characters allowed.
		However, <strong>*all characters outside the <abbr title="American Standard Code for Information Interchange">ASCII</abbr> range*</strong> are also available for use in variable names.
		Again, this is something the <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> manual teaches you right away.
		In practice, most people stick to the <abbr title="American Standard Code for Information Interchange">ASCII</abbr> range when naming variables, but this should never be considered a hard requirement.
		Personally, prefix my variable names with a cent sign if the variable contains a closure.
		The only time I use closures is when I need to reuse code but I can&apos;t generalise the code enough to warrant a first class function.
		This is code no one else needs to call, so no one else will need to type this symbol later.
		Using the strange symbol allows me to put it into a separate pseudonamespace.
		I used a funny character in an actual <code>namespace</code> once too, for a class that should never be touched by code outside my own library.
		The class basically was a workaround for the fact that a feature I needed wasn&apos;t present in old versions of <abbr title="PHP: Hypertext Preprocessor">PHP</abbr>, but had just been added to the cutting-edge release.
		In other words, these characters are available for use in all symbol names, not just variable names.
		I wouldn&apos;t recommend using them in most cases, but they are very useful to have sometimes.
	</p>
	<p>
		Next, we&apos;re introduced to the <code>define()</code> function.
		Like the lesson says, <code>define()</code> defines constants.
		However, the <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> manual will tell you that it&apos;s not the <strong>*preferred*</strong> method of defining constants.
		The <code>cont</code> keyword is better for a few reasons.
		I forget all the reasons, but one reason is because the <code>const</code> keyword runs faster than the <code>define()</code> function.
		This may be because <code>const</code> does its thing at compile time, while <code>define()</code> waits until run time.
		If you need to define a constant conditionally and/or in terms of some variable, <code>define()</code> is your only option.
		For all other cases, use <code>const</code> instead.
	</p>
	<p>
		It drives me batty when modulus division is described as a finding of the &quot;remainder&quot;.
		When dividing, there <strong>*is no remainder*</strong>.
		Five divided by two is <strong>*not*</strong> two remainder one.
		It&apos;s two and a half.
		Modulo division is more like overflow, in how it works.
		Take a two-bit, unsigned integer, for example.
		There are four possible values, so if you store a value in such a space, your result is the value you attempted to store, but modulo 4.
		This shows us too that as <code>4</code> gets stored as <code>0x00</code>, a number modulo itself is zero.
		Modulus division doesn&apos;t have to involve powers of two, obviously.
		Powers of two just make the point easy to explain to computer science majors.
		If you have fifteen modulo ten, it just means you&apos;re trying to find the result you&apos;d get from trying to store fifteen in a space that has only ten values.
		Nine, zero (because of roll over), one, two, three, four, five.
		So you end up with a result of five.
		Dealing with negative numbers in modulus division is undefined, so you get different results depending on how modulus division is implemented in the environment you&apos;re working in.
		However, when working with only positive numbers, you get the same results when you look at modulus as roll over as when you look at it as &quot;remainders&quot;.
		So I guess, do it whatever way makes it easy for you.
		However, when you <strong>*talk*</strong> about modulus being a finding of &quot;remainders&quot;, it makes you look like the type of idiot that doesn&apos;t know how to find fractions or decimals when dividing.
		It makes you look too stupid to figure out that there doesn&apos;t need to be &quot;leftovers&quot; just because something doesn&apos;t divide <strong>*evenly*</strong>.
	</p>
	<p>
		The quiz for the week startled me a bit.
		The first question asked what command you use to compile code.
		The next was asking about how to change the working directory on a Linux system.
		What?
		I didn&apos;t even remember studying those things in this course, though I&apos;ve used the <code>make</code> and <code>cd</code> commands countless times on my Debian system, so I knew the answers.
		And isn&apos;t this a course about Web development?
		Compiling code and changing the working directory are things you do locally, not in regards to websites.
		What else did I miss, that maybe I <strong>*didn&apos;t*</strong> just happen to know because of my personal situation?
		After a bit, it struck me: we were supposed to read about how to compile Apache and <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> from source last week.
		I sort of skipped that part of the reading material, due to already having compiled both <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> and Apache from source a few times.
		The material would have definitely used the <code>make</code> command, and would have used the <code>cd</code> command a few times.
		So I&apos;m still up to speed on things.
	</p>
	<p>
		I don&apos;t think most people in this course ever think about accessibility, let along care about it.
		I mean, most Web developers certainly don&apos;t.
		There is one student I&apos;ve been conversing with, even outside of class a bit, who seems intelligent and always has an insightful take on the discussion assignments.
		And this week, I learned that they&apos;ve been formatting their discussion posts with accessibility in mind.
		I&apos;ve picked up a new trick to better format my own posts.
		I suppose it won&apos;t matter for in-discussion, as again, most everyone doesn&apos;t care.
		But my discussion posts are also archived in my public journal.
		(Due to censorship from the school, all such journal entries aren&apos;t visible to the public until 2023.)
		The better my posts are formatted for the discussion assignments, the better they&apos;ll be formatted in my journal.
	</p>
</section>
		<hr/>
		<p>
			Copyright Â© 2019 Alex Yst;
			You may modify and/or redistribute this document under the terms of the <a rel="license" href="/license/gpl-3.0-standalone.xhtml"><abbr title="GNU&apos;s Not Unix">GNU</abbr> <abbr title="General Public License version Three or later">GPLv3+</abbr></a>.
			If for some reason you would prefer to modify and/or distribute this document under other free copyleft terms, please ask me via email.
			My address is in the source comments near the top of this document.
			This license also applies to embedded content such as images.
			For more information on that, see <a href="/en/a/licensing.xhtml">licensing</a>.
		</p>
		<p>
			<abbr title="World Wide Web Consortium">W3C</abbr> standards are important.
			This document conforms to the <a href="https://validator.w3.org./nu/?doc=https%3A%2F%2Fy.st.%2F%5BTEMP%5D%2F%5BTEMP%5D.xhtml"><abbr title="Extensible Hypertext Markup Language">XHTML</abbr> 5.2</a> specification and uses style sheets that conform to the <a href="http://jigsaw.w3.org./css-validator/validator?uri=https%3A%2F%2Fy.st.%2F%5BTEMP%5D%2F%5BTEMP%5D.xhtml"><abbr title="Cascading Style Sheets">CSS</abbr>3</a> specification.
		</p>
	</body>
</html>

