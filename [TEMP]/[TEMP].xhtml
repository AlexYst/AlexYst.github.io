<?xml version="1.0" encoding="utf-8"?>
<!--
                                                                                     
 h       t     t                ::       /     /                     t             / 
 h       t     t                ::      //    //                     t            // 
 h     ttttt ttttt ppppp sssss         //    //  y   y       sssss ttttt         //  
 hhhh    t     t   p   p s            //    //   y   y       s       t          //   
 h  hh   t     t   ppppp sssss       //    //    yyyyy       sssss   t         //    
 h   h   t     t   p         s  ::   /     /         y  ..       s   t    ..   /     
 h   h   t     t   p     sssss  ::   /     /     yyyyy  ..   sssss   t    ..   /     
                                                                                     
	<https://y.st./>
	Copyright Â© 2018 Alex Yst <mailto:copyright@y.st>

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program. If not, see <https://www.gnu.org./licenses/>.
-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<base href="https://y.st./[TEMP]/[TEMP].xhtml"/>
		<title>Packets &lt;https://y.st./[TEMP]/[TEMP].xhtml&gt;</title>
		<link rel="icon" type="image/png" href="/link/CC_BY-SA_4.0/y.st./icon.png"/>
		<link rel="stylesheet" type="text/css" href="/link/main.css"/>
		<script type="text/javascript" src="/script/javascript.js"/>
		<meta name="viewport" content="width=device-width"/>
	</head>
	<body>
<nav>
</nav>
		<header>
			<h1>Packets</h1>
			<p>Written in <span title="Communications and Networking">CS 2204</span> by <a href="https://y.st./">Alex Yst</a>, finalised on 2018-05-30</p>
		</header>
<section id="Unit8">
	<h2>Unit 8</h2>
	<h3><abbr title="Domain Name System">DNS</abbr></h3>
	<p>
		<abbr title="Domain Name System">DNS</abbr> is a vital part of many network systems.
		The Web, email, even gaming ...
		They all use <abbr title="Domain Name System">DNS</abbr>.
		With that in mind, there&apos;s no doubt that the lack of recovery of lost packets in <abbr title="Domain Name System">DNS</abbr>, seeing as <abbr title="Domain Name System">DNS</abbr> is built on <abbr title="User Datagram Protocol">UDP</abbr> instead of <abbr title="Transmission Control Protocol">TCP</abbr>, is a problem.
		That said, with <abbr title="Domain Name System">DNS</abbr> so frequently used and not requiring much data to be transferred in each query/response, using <abbr title="User Datagram Protocol">UDP</abbr> instead of <abbr title="Transmission Control Protocol">TCP</abbr> saves a lot of overhead.
	</p>
	<p>
		Back to the question at hand, <abbr title="Domain Name System">DNS</abbr> is actually able to be used over <abbr title="Transmission Control Protocol">TCP</abbr> or <abbr title="User Datagram Protocol">UDP</abbr>; it&apos;s not limited to just <abbr title="User Datagram Protocol">UDP</abbr> as the question claims.
		When used over <abbr title="User Datagram Protocol">UDP</abbr> though, a <abbr title="Domain Name System">DNS</abbr> client will re-attempt a query if it doesn&apos;t get a response, but usually no more then four times (Bernstein, n.d.).
		If the query fails four times, there&apos;s probably a networking issue, and <abbr title="Transmission Control Protocol">TCP</abbr> isn&apos;t going to help with that, so lack of <abbr title="Transmission Control Protocol">TCP</abbr> features isn&apos;t going to save your query at that point.
	</p>
	<h3>Vacation reply trap</h3>
	<p>
		I didn&apos;t see any mention of vacation replies in this week&apos;s reading material, so I&apos;m unsure of the context of this question.
		The term &quot;vacation reply&quot; could refer to automated replies on any sort of asynchronous messaging system; or even several types of synchronous messaging systems.
		Usually, I hear the term used to refer to email-related auto-replies though, so I&apos;ll discuss vacation reply loops in that context.
	</p>
	<p>
		When two email servers start sending a series of replies to one another, it&apos;s what&apos;s known as an email loop.
		As Wikipedia mentions, one cause of such a loop is vacation auto-responders (Wikipedia, 2018).
		As to how long the loop will persist, it really depends on the configurations of both servers.
		Either side could end the loop at any time by simply not replying.
		If either side&apos;s storage quota fills with these bogus responses, that side will have nothing to reply to and the loop will terminate.
		With unlimited disk space, the loop could continue forever.
		Additionally, there are anti-loop measures that can be coded into the software of the servers.
		For example, special headers can be used to indicate that a letter is a pre-generated reply.
		If the other server is aware of such a header, it can simply ignore the latter instead of automatically responding to it.
		In other words, if both servers conform to such a standard, the loop won&apos;t begin in the first place.
		This does require compliance on both ends though.
		Another measure, and one that doesn&apos;t require both servers to work together, is to simply set a limit to how many (or how often) the autoresponder will respond to letters from a given user.
		Hit that limit, and the loop terminates.
		For example, if your autoresponder will only reply to one email per sender per day, it doesn&apos;t matter how badly the other party&apos;s autoresponder is configured.
		You send a letter to them, their responder replies, your responder replies, theirs replies again, and your responder ignores this final auto-reply, so only three automatic replies were sent over the network instead of the potential millions.
	</p>
	<p>
		Short of disk limitations and anti-loop measures though, yes, the loop would continue indefinitely until one party returned from vacation and turned off their autoresponder.
	</p>
	<h3><code>Content-Type</code> headers</h3>
	<p>
		The question asks why Web pages are prefixed with <abbr title="Multi-purpose Internet Mail Extensions">MIME</abbr> headers.
		Being a Web person, this is something I&apos;ve dealt with quite a bit.
		However, <abbr title="Multi-purpose Internet Mail Extensions">MIME</abbr> stands for &quot;Multipurpose Internet Mail Extensions&quot;.
		In other words, <abbr title="Multi-purpose Internet Mail Extensions">MIME</abbr> headers are for email, not the Web!
		People commonly <strong>*misuse*</strong> the term &quot;<abbr title="Multi-purpose Internet Mail Extensions">MIME</abbr>&quot; or even &quot;<abbr title="Multi-purpose Internet Mail Extensions">MIME</abbr>-type&quot; to refer to <abbr title="Hypertext Transfer Protocol">HTTP</abbr> <code>Content-Type</code> headers.
	</p>
	<p>
		<abbr title="Hypertext Transfer Protocol">HTTP</abbr> <code>Content-Type</code> headers are used to inform the client as to what file type is being transmitted.
		That way, the client knows how to process it.
		Some types of files have data types that can be easily identified.
		For example, many image types such as <abbr title="Portable Network Graphic">PNG</abbr> and <abbr title="Joint Photographic Experts Group">JPEG</abbr> have predictable opening sequences of octets.
		However, other file types don&apos;t have such indicators in their encoding.
		For example, <abbr title="Extensible Markup Language">XML</abbr> (including <abbr title="Extensible Hypertext Markup Language">XHTML</abbr>), <abbr title="Cascading Style Sheets">CSS</abbr>, and JavaScript are all encoded the same way: as plain text.
		Well-written <abbr title="Hypertext Markup Language">HTML</abbr> can even be indistinguishable from <abbr title="Extensible Hypertext Markup Language">XHTML</abbr> with certain features omitted.
		The <code>Content-Type</code> header allows the client to know how the server wants the file to be interpreted.
		There could be a hard-coded file extension reader put in the client instead, but even the file extension isn&apos;t a reliable way to detect file type.
		For example, a <code>.php</code> extension refers to a <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> script file on the server side.
		But the server doesn&apos;t send the script, it sends the output of the script.
		So based on file extension, what should the client treat this file as?
		There&apos;s no way to know without the <code>Content-Type</code> header!
		The output could be <abbr title="Hypertext Markup Language">HTML</abbr>, as is the case usual, but it could be <abbr title="Extensible Hypertext Markup Language">XHTML</abbr> (I always use <abbr title="Extensible Hypertext Markup Language">XHTML</abbr>, never <abbr title="Hypertext Markup Language">HTML</abbr>) or even an image of some sort!
		Next, we have the case of directory indexes.
		The file name isn&apos;t even known.
		It could be <code>index.xhtml</code>, but it could also be <code>index.html</code>, <code>no-index.png</code>, or anything else.
		The <code>Content-Type</code> header is simply the most reliable way to ensure all clients understand the sent file in the same way; or at least, ensure all reasonable (read: standards-compliant) clients understand the file the same way.
		If any client <strong>*doesn&apos;t*</strong> interpret the file as being of that sent type (I&apos;m looking at you, Internet Explorer), it&apos;s that client in the wrong and this cannot be blamed on the server.
		The server was unambiguously clear in what the file was to be interpreted as through use of the <code>Content-Type</code> header.
	</p>
	<h2>Firewall issues: <abbr title="Voice over Internet Protocol">VoIP</abbr> versus audio streaming</h2>
	<p>
		I couldn&apos;t find anything that addressed the issue of firewall problems specific to <abbr title="Voice over Internet Protocol">VoIP</abbr> or audio streaming, either in the assigned reading or elsewhere.
		As far as I can tell, the only issue would be a misconfigured firewall, blocking something you didn&apos;t want blocked.
		In either case, you&apos;re trying to read data from an audio stream over the network; the only difference with <abbr title="Voice over Internet Protocol">VoIP</abbr> is that <abbr title="Voice over Internet Protocol">VoIP</abbr> has <strong>*two*</strong> audio streams, one in each direction.
	</p>
	<div class="APA_references">
		<h3>References:</h3>
		<p>
			Bernstein, D. J. (n.d.). Notes on the Domain Name System. Retrieved from <a href="https://cr.yp.to/djbdns/notes.html"><code>https://cr.yp.to/djbdns/notes.html</code></a>
		</p>
		<p>
			Wikipedia. (2018, March 28). Email loop. Retrieved from <a href="https://en.wikipedia.org/wiki/Email_loop"><code>https://en.wikipedia.org/wiki/Email_loop</code></a>
		</p>
	</div>
</section>
		<hr/>
		<p>
			Copyright Â© 2018 Alex Yst;
			You may modify and/or redistribute this document under the terms of the <a rel="license" href="/license/gpl-3.0-standalone.xhtml"><abbr title="GNU&apos;s Not Unix">GNU</abbr> <abbr title="General Public License version Three or later">GPLv3+</abbr></a>.
			If for some reason you would prefer to modify and/or distribute this document under other free copyleft terms, please ask me via email.
			My address is in the source comments near the top of this document.
			This license also applies to embedded content such as images.
			For more information on that, see <a href="/en/a/licensing.xhtml">licensing</a>.
		</p>
		<p>
			<abbr title="World Wide Web Consortium">W3C</abbr> standards are important.
			This document conforms to the <a href="https://validator.w3.org./nu/?doc=https%3A%2F%2Fy.st.%2F%5BTEMP%5D%2F%5BTEMP%5D.xhtml"><abbr title="Extensible Hypertext Markup Language">XHTML</abbr> 5.2</a> specification and uses style sheets that conform to the <a href="http://jigsaw.w3.org./css-validator/validator?uri=https%3A%2F%2Fy.st.%2F%5BTEMP%5D%2F%5BTEMP%5D.xhtml"><abbr title="Cascading Style Sheets">CSS</abbr>3</a> specification.
		</p>
	</body>
</html>

