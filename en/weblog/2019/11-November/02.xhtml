<?xml version="1.0" encoding="utf-8"?>
<!--
                                                                                     
 h       t     t                ::       /     /                     t             / 
 h       t     t                ::      //    //                     t            // 
 h     ttttt ttttt ppppp sssss         //    //  y   y       sssss ttttt         //  
 hhhh    t     t   p   p s            //    //   y   y       s       t          //   
 h  hh   t     t   ppppp sssss       //    //    yyyyy       sssss   t         //    
 h   h   t     t   p         s  ::   /     /         y  ..       s   t    ..   /     
 h   h   t     t   p     sssss  ::   /     /     yyyyy  ..   sssss   t    ..   /     
                                                                                     
	<https://y.st./>
	Copyright Â© 2019 Alex Yst <mailto:copyright@y.st>

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program. If not, see <https://www.gnu.org./licenses/>.
-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<base href="https://y.st./en/weblog/2019/11-November/02.xhtml"/>
		<title>Putting the &quot;test&quot; in &quot;Minetest&quot; &lt;https://y.st./en/weblog/2019/11-November/02.xhtml&gt;</title>
		<link rel="icon" type="image/png" href="/link/CC_BY-SA_4.0/y.st./icon.png"/>
		<link rel="stylesheet" type="text/css" href="/link/main.css"/>
		<script type="text/javascript" src="/script/javascript.js"/>
		<meta name="viewport" content="width=device-width"/>
	</head>
	<body>
<nav>
	<p>
		<a href="/en/coursework/">Coursework</a> |
		<a href="/en/take-down/">Take-down requests</a> |
		<a href="/en/">Home</a> |
		<a href="/en/a/about.xhtml">About</a> |
		<a href="/en/a/contact.xhtml">Contact</a> |
		<a href="/a/canary.txt">Canary</a> |
		<a href="/en/URI_research/"><abbr title="Uniform Resource Identifier">URI</abbr> research</a> |
		<a href="/en/opinion/">Opinions</a> |
		<a href="/en/law/">Law</a> |
		<a href="/en/recipe/">Recipes</a> |
		<a href="/en/a/links.xhtml">Links</a> |
		<a href="/en/weblog/2019/11-November/02.xhtml.asc">{this page}.asc</a>
	</p>
	<hr/>
	<p>
		Weblog index:
		<a href="/en/weblog/memories">Memories</a> |
		<a href="/en/weblog/"><abbr title="American Standard Code for Information Interchange">ASCII</abbr> calendars</a> |
		<a href="/en/weblog/index_ol_ascending.xhtml">Ascending list</a> |
		<a href="/en/weblog/index_ol_descending.xhtml">Descending list</a>
	</p>
	<hr/>
	<p>
		Jump to entry:
		<a href="/en/weblog/2015/03-March/07.xhtml">&lt;&lt;First</a>
		<a rel="prev" href="/en/weblog/2019/11-November/01.xhtml">&lt;Previous</a>
		<a rel="next" href="/en/weblog/2019/11-November/03.xhtml">Next&gt;</a>
		<a href="/en/weblog/latest.xhtml">Latest&gt;&gt;</a>
			</p>
			<hr/>
</nav>
		<header>
			<h1>Putting the &quot;test&quot; in &quot;Minetest&quot;</h1>
			<p>Day 01701: <time>Saturday, 2019 November 02</time></p>
		</header>
<img src="/img/CC_BY-SA_4.0/y.st./weblog/2019/11/02.jpg" alt="Rose hips" class="framed-centred-image" width="649" height="480"/>
<section id="Minetest">
	<h2>Minetest</h2>
	<p>
		I do the mining part of Minetest often enough, but not really the testing part.
		So today, I sat down to do some testing.
	</p>
	<p>
		An entire block to be deleted needs to be checked to see if it&apos;s protected first.
		This means I&apos;ve got to calculate the bounds of the block before deleting it.
		This pretty much made moot my first planned experiment, which was to see what would happen if the boundaries of the area I told the game to delete didn&apos;t line up nicely with block boundaries.
		My intent had been that if the engine extended the specified area, deleting more than it had been told to in such cases, I&apos;d just tell the engine to delete the single node that the bomb was placed at, and it&apos;d nuke the entire block that node inhabited.
		On the other hand, if the engine only deleted blocks that fully rested within the specified area, I&apos;d extend the radius of the bomb out by fifteen nodes in all directions, and only one map block would fully fit in that area, so only that block would be deleted.
		If there was rounding instead, the safest bet would be to just calculate the boundaries of the block.
		But I need to know the bounds of the block anyway so I can check the area for protection, so attempts to skip calculating the bounds would be pointless.
		So I skipped these tests and moved on.
	</p>
	<p>
		I programmed a rudimentary reset bomb that&apos;d take out a single block, and tried it out in a creative mode world.
		My goal here was to see what got regenerated and what didn&apos;t.
		As I mentioned before, I wasn&apos;t sure if the entire chunk would be regenerated, or just the block.
		I set up a long line of a random node that didn&apos;t belong in the area.
		In this case, I chose aspen trunks, which I lined up on a beach near a small pine grove.
		Not an aspen in sight.
		Placing the bomb, I saw there was only a sixteen-node gap in my line.
		The block was being regenerated, but the nearby blocks were untouched.
		At least one of the opposite-side neighbours of this block would have been in the same chunk, if not both, so the entire chunk isn&apos;t getting regenerated.
		This was what I preferred.
		Next, replaced the missing section with acacia trunks, and placed a few cobble a bit outside the area that had been deleted.
		Some cobble were placed on the ground, while other cobble was placed in the ground.
		When I deleted the area again, I found the nearby cobble was untouched.
		I don&apos;t think ground areas in neighbouring blocks are being overwritten by new terrain, but there&apos;s still a chance caves would dig through them.
	</p>
	<p>
		I noticed that some grass seemed to shift when I&apos;d placed one of my reset bombs though.
		I tried the same spot again repeatedly, but nothing seemed to happen.
		I found that when I reset areas that hadn&apos;t yet been reset, the grass moved into new positions, but previously-regenerated grass stayed in place.
		That got me thinking: what about trees?
		I tried resetting the trees, and that just erased them.
		After much experimentation, I found that if I reset areas above the grove, trees would spawn in the grove sometimes, but not in their original places, and where they spawned wasn&apos;t the same every time.
		If I reset neat the ground though, trees would simply be erased.
		I&apos;m not sure what&apos;s up with that.
		Also, when I reset this one spot, I get a fallen log, which sometimes has a red mushroom on it.
		Fallen logs never spawn in my grove when the world first generates though, and neither do mushrooms.
		In fact, it seems that the grove is nearly identical every time it generates when the world is first entered.
	</p>
	<p>
		It seems to be the case that regenerated blocks are more random that initially-generated blocks.
		Additionally, the rules used to spawn trees aren&apos;t as friendly to regenerated areas.
		I started thinking that deliberately deleting entire chunks might be the best way to handle the situation.
	</p>
	<p>
		Next, I was going to try a cave area, but I got distracted by the kelp around my isle.
		When I tried resetting that, I found the new blocks had some kelp, but significantly less than the original blocks had.
		I tried a couple caves, and the cobble still wasn&apos;t being overwritten in there.
		I started doubting my memory that cobble was considered ground content, so I tried again with stone.
		That&apos;s the main node found all throughout the ground, and caves constantly rip right through it.
		Obviously <strong>*that*</strong> would be considered a ground node and be influenced by caves if anything would.
		And sure enough, my placed stone disappeared.
		I also tried replacing a coal ore node with stone just outside the range of the bomb, and it got replaced with new coal ore.
		Back at my original test site, I found that using stone instead of cobble caused the stone to be replaced there as well.
	</p>
	<p>
		Next, I tried deleting entire chunks.
		That fixed the lack of trees, and those started spawning in reasonable amounts.
		Their locations were still more random than their initial state, but at least it looked less barren.
		That fix didn&apos;t work for the kelp though.
		Regenerated areas still had much less kelp than untouched areas.
		I&apos;m not sure what causes this.
	</p>
	<p>
		I can stand to have trees not show up.
		They can be planted from saplings.
		And an area shouldn&apos;t be reset until all the resources have been taken from it, so having any kelp at all is a net gain, if you do it right.
		The main useful point of these bombs, as far as I&apos;m concerned, is for coral-mining.
		Anything else is probably easier to obtain without the bombs.
		So I found a reef, and tested out the bombs there.
		They worked consistently with how they&apos;ve worked everywhere else so far.
		The reefs shifted around a bit, but generated within the same blocks every time.
	</p>
	<p>
		With the area to check protection in being bigger than the area of deletion, I can&apos;t use the same coordinates for both purposes.
		So I went back to the initial test I&apos;d intended to perform, but written off.
		I tried setting the area to be deleted as containing only the node the bomb is placed at.
		It seems the engine deletes all blocks that intersect the area, meaning it has the intended effect if I simply pass in the node the bomb is placed at without any calculation on my part.
		Nice.
		For my purposes, anyway.
		I can easily see people making mistakes with this and deleting stuff they wanted to keep.
	</p>
	<p>
		I later realised I&apos;d forgotten to set my newly-compiled copy of Minetest to use a chunk size of three blocks.
		This was crucial.
		In my experiments, I was assuming a chunk size of three, but because a new version of Minetest had been released, I&apos;d needed to start fresh and hadn&apos;t configured the new copy or transferred my old configuration file.
		Once I set the chunk size back to three, I found that my island now initially generates with a fallen log it&apos;s never had before.
		Some difference between 5.0.1 and 5.1.0 makes this new log spawn in the latter, but not the former.
		Once I had the chunk size and the assumed chunk size identical, everything stopped moving from its initially-assigned position when I used the reset bombs.
		It turns out there&apos;s just much less kelp when the chunk size is set to three than when set to five.
		And that&apos;s fine.
		Additionally, while the decorations stopped moving when the area was regenerated, decorations placed using schematics, such as trees and fallen logs, don&apos;t always omit the same segments.
		This leads to variation in the shape in which trees generate, but not <strong>*where*</strong> the trees generate.
		I&apos;m confused as to why such variation doesn&apos;t exist when initially generating an area.
		I made a few dozen worlds, and they all had the same starting trees, but when reset, the trees took slightly different forms.
	</p>
	<p>
		Further experimentation showed me that I could convert stone just outside the deleted range into other types of nodes, such as dirt or sand.
		But only in some places
		I couldn&apos;t figure out why stone placed in some areas wouldn&apos;t convert no matter how many times I reset the area.
		There&apos;s got to be a pattern, I&apos;m just not sure what it is.
	</p>
	<p>
		Though full-chunk deletion results in more-realistic results, I think it&apos;s a bit too powerful.
		I&apos;m probably only going to have single-chunk deletion in the mod.
	</p>
	<p>
		Next, I worked on planning the mapping of a new world.
		I&apos;d like to generate an overhead map next time.
		I don&apos;t want the map segments to be too large, as they&apos;d stretch out the Web pages too much.
		1024 pixels seems like a good upper limit.
		The default window dimensions result in screenshots being 1024 pixels wide, so if the maps are no wider than that, they won&apos;t stretch the page any more than it&apos;s already being stretched.
		At the same time though, the fewer segments, the better, so I don&apos;t want them to be too small, either.
		Some quick calculation showed me that I could split the world into 61 1024-pixel pieces in each dimension, but that leaves 31 places where two map segments overlap, and there&apos;s no methodical way to place them.
		I thought for cleaner results, it&apos;d be better to use smaller segments so they&apos;d fit together more reasonably, even if it meant having even more segments to deal with.
		After some trial and error, I found splitting the map into 73 segments in each direction to be a working solution.
		This gives up segments that are 912 pixels in each dimension, with a four-block (64-pixel) overlap with the adjacent maps on each side.
		Mostly, this is just future-proofing though.
		In all reality, there&apos;s a good chance I won&apos;t even need more than one map segment to build in.
		A 912-metre by 912-metre region seems like a pretty vast place.
	</p>
</section>
<section id="laser">
	<h2>Hair-removal</h2>
	<p>
		It&apos;s Saturday today, so I was due for another home <abbr title="light amplification by stimulated emission of radiation">laser</abbr> treatments.
		They&apos;re not difficult and they&apos;re not painful, but I hope I can be done with them soon.
		It&apos;s sometimes hard to convince myself to get the treatments done.
		They&apos;re time-consuming and dull.
	</p>
</section>
		<hr/>
		<p>
			Copyright Â© 2019 Alex Yst;
			You may modify and/or redistribute this document under the terms of the <a rel="license" href="/license/gpl-3.0-standalone.xhtml"><abbr title="GNU&apos;s Not Unix">GNU</abbr> <abbr title="General Public License version Three or later">GPLv3+</abbr></a>.
			If for some reason you would prefer to modify and/or distribute this document under other free copyleft terms, please ask me via email.
			My address is in the source comments near the top of this document.
			This license also applies to embedded content such as images.
			For more information on that, see <a href="/en/a/licensing.xhtml">licensing</a>.
		</p>
		<p>
			<abbr title="World Wide Web Consortium">W3C</abbr> standards are important.
			This document conforms to the <a href="https://validator.w3.org./nu/?doc=https%3A%2F%2Fy.st.%2Fen%2Fweblog%2F2019%2F11-November%2F02.xhtml"><abbr title="Extensible Hypertext Markup Language">XHTML</abbr> 5.2</a> specification and uses style sheets that conform to the <a href="http://jigsaw.w3.org./css-validator/validator?uri=https%3A%2F%2Fy.st.%2Fen%2Fweblog%2F2019%2F11-November%2F02.xhtml"><abbr title="Cascading Style Sheets">CSS</abbr>3</a> specification.
		</p>
	</body>
</html>

