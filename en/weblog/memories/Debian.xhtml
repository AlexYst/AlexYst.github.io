<?xml version="1.0" encoding="utf-8"?>
<!--
                                                                                     
 h       t     t                ::       /     /                     t             / 
 h       t     t                ::      //    //                     t            // 
 h     ttttt ttttt ppppp sssss         //    //  y   y       sssss ttttt         //  
 hhhh    t     t   p   p s            //    //   y   y       s       t          //   
 h  hh   t     t   ppppp sssss       //    //    yyyyy       sssss   t         //    
 h   h   t     t   p         s  ::   /     /         y  ..       s   t    ..   /     
 h   h   t     t   p     sssss  ::   /     /     yyyyy  ..   sssss   t    ..   /     
                                                                                     
	<https://y.st./>
	Copyright Â© 2019 Alex Yst <mailto:copyright@y.st>

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program. If not, see <https://www.gnu.org./licenses/>.
-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<base href="https://y.st./en/weblog/memories/Debian.xhtml"/>
		<title>How I came to be a Debian user &lt;https://y.st./en/weblog/memories/Debian.xhtml&gt;</title>
		<link rel="icon" type="image/png" href="/link/CC_BY-SA_4.0/y.st./icon.png"/>
		<link rel="stylesheet" type="text/css" href="/link/main.css"/>
		<script type="text/javascript" src="/script/javascript.js"/>
		<meta name="viewport" content="width=device-width"/>
	</head>
	<body>
<nav>
	<p>
		<a href="/en/coursework/">Coursework</a> |
		<a href="/en/take-down/">Take-down requests</a> |
		<a href="/en/">Home</a> |
		<a href="/en/a/about.xhtml">About</a> |
		<a href="/en/a/contact.xhtml">Contact</a> |
		<a href="/a/canary.txt">Canary</a> |
		<a href="/en/URI_research/"><abbr title="Uniform Resource Identifier">URI</abbr> research</a> |
		<a href="/en/opinion/">Opinions</a> |
		<a href="/en/law/">Law</a> |
		<a href="/en/recipe/">Recipes</a> |
		<a href="/en/a/links.xhtml">Links</a> |
		<a href="/en/weblog/memories/Debian.xhtml.asc">{this page}.asc</a>
	</p>
	<hr/>
	<p>
		Weblog index:
		<a href="/en/weblog/memories">Memories</a> |
		<a href="/en/weblog/"><abbr title="American Standard Code for Information Interchange">ASCII</abbr> calendars</a> |
		<a href="/en/weblog/index_ol_ascending.xhtml">Ascending list</a> |
		<a href="/en/weblog/index_ol_descending.xhtml">Descending list</a>
	</p>
	<hr/>
</nav>
		<header>
			<h1>How I came to be a Debian user</h1>
			<p>Rehashing old memories</p>
		</header>
<p>
	When I was very young, Summer, my mother, bought a home computer.
	Home computers were pretty new back then.
	Probably pretty expensive, too.
	I mean, home computers these days are still pretty pricey, but they would have been much more so back then, when the technology was still new, and production methods weren&apos;t so efficient.
	As such, I, a small child, was told never to touch the thing.
	I didn&apos;t really know or care why at the time.
	And as I didn&apos;t know much about the thing, I had no real interest in it.
	I had no idea what power computers held, and they might not have even been good enough yet to be worth my time, in retrospect.
	What could I even do with the thing?
	Needless to say, this machine ran Windows.
	That&apos;ll be relevant later.
</p>
<p>
	In school, we started working with computers.
	Apple had donated a bunch of OS X machines to the school district, so that&apos;s what I grew up on: OS X.
	At some point, I was exposed to Windows.
	I don&apos;t remember the circumstances.
	But I found it a pain to work with, as I was used to OS X by then.
	Apple&apos;s computer-donation plan had worked well on me.
	Eventually, my father offered to buy me a laptop.
	He said he could either get me a brand-new Windows machine or, because they&apos;re so much more expensive, a used OS X machine.
	Needless to say, I went with the Apple laptop.
	I didn&apos;t care if it was used.
	Everything I owned already was used, so why should my laptop be any different?
</p>
<p>
	This machine didn&apos;t hold up well.
	he hinge was weak, and it started to break.
	The breaking hinge impacted use of the machine much more than I thought it would, at the time.
	The screen became increasingly tinted red, so I could barely see anything on it.
	By applying pressure in just the right places, I could restore enough of the picture to continue using the machine for a while, but even that became diminishing effective over time.
	I had to go without a computer for years, after that.
	I later found out that the hinge issue is a common Apple laptop issue.
	Their hardware looks sleek and fancy, and it certainly costs a lot, but it lacks durability, and isn&apos;t worth your money.
</p>
<p>
	There used to be a used computer store closer to my home.
	Out of luck, Summer and I stopped in there one day because she needed something.
	I forget what.
	They were clearing out old Apple desktop machines; the kind where the computer is built into the thick, oddly-shaped monitor.
	An iMac.
	These things were way old by this point, but they were exactly what I&apos;d grown up on at school.
	And they were only $20 <abbr title="United States Dollars">USD</abbr> each.
	So I bought one.
	I honestly had no idea just how outdated these things actually were.
	I hadn&apos;t been in school for a while, and hadn&apos;t seen the new Apple machines.
	I had no desk, and had to put it on my dresser.
	I had no chair, either, and sat on the nearby bed.
	It hurt my wrists to use the keyboard in such a setup, but at least I had a computer again.
</p>
<p>
	The thing ran OS X 10.4.11.
	The machine was so old that it couldn&apos;t be updated to any later system.
	I used the thing for a few years, always at the same version, so I still remember the operating system&apos;s version number.
	It&apos;s kind of funny.
	It was a <abbr title="Performance Optimisation With Enhanced RISC - Performance Computing">PowerPC</abbr> machine, and I found that most interesting software either didn&apos;t run on <abbr title="Performance Optimisation With Enhanced RISC - Performance Computing">PowerPC</abbr>, or didn&apos;t run on systems that old.
	What really annoyed me about the software that wouldn&apos;t run on older operating systems though was that most of it didn&apos;t even tell what the cutoff point was numerically.
	For example, a piece of software might claim to run on &quot;Snow Leopard&quot; or later.
	What does that even mean?
	10.4.11, my system, was part of the range given the code name &quot;Tiger&quot;.
	But how do I compare them?
	Is &quot;Snow Leopard&quot; earlier or later than &quot;Snow Leopard&quot;?
	Version code names suck, and there&apos;s no good reason to use them.
	Please, <em>*please*</em>, <strong>*please*</strong>, always specify things using version numbers, and not those ridiculous code names.
	You might think it&apos;s fine for your use case.
	It&apos;s not.
	It&apos;s definitely not.
	As an example, Ubuntu&apos;s versions are given by Canonical code names with the first letter beginning with the next letter in the order of the English alphabet.
	So you might think it&apos;s easy to compare code names and figure out where they fall in relation to one another.
	<strong>BUT NOT EVERYONE *KNOWS* THAT CANONICAL DOES THIS!!</strong>
	Please don&apos;t expect everyone to be in the loop.
	There are new users, as well as long-time users.
	Version numbers are <strong>*always*</strong> easier and more-intuitive to compare.
</p>
<p>
	Summer always got annoyed that I preferred OS X over Windows.
	But what did she expect?
	I&apos;d been raised on OS X, and it was so much better of a system.
	I mean, Apple hardware was apparently garbage, and that&apos;s an issue, but OS X was built up from a solid <abbr title="Berkeley Software Distribution">BSD</abbr> foundation.
	It wasn&apos;t <abbr title="Berkeley Software Distribution">BSD</abbr>-compatible by any means, but it had that strong, UNIX-like base, making it run a thousand times better than Windows will probably <strong>*ever*</strong> run.
	I hadn&apos;t been exposed to Windows as a young child, and as she herself has such a hard time adapting to change, she should have very-easily seen how she&apos;d contributed to being a Mac person by making sure I was exposed to OS X and <strong>*only*</strong> OS X.
</p>
<p>
	I learned the basics of a lot of things on that machine.
	I got my start in pixel art, for example.
	I tried a couple different image editors.
	The <abbr title="GNU Image Manipulation Program">GIMP</abbr> was the one I started with, but it was a major pain to work with.
	At the time, I thought this the <abbr title="GNU Image Manipulation Program">GIMP</abbr>&apos;s fault, but I&apos;d later learn that the <abbr title="GNU Image Manipulation Program">GIMP</abbr> works fantastically on Linux.
	I think the problem was the X system for OS X.
	X got ported to OS X, and you had to install X because the <abbr title="GNU Image Manipulation Program">GIMP</abbr> depended on it.
	I forget what the port was called, but it didn&apos;t play nicely with OS X&apos;s native graphics system, and if I recall, merely mousing over a window automatically bringing focus to it, making multi-window applications such as the <abbr title="GNU Image Manipulation Program">GIMP</abbr> painful to use.
	It might have also defocused windows when you move the cursor off of them, but I don&apos;t recall for sure.
	I ended up switching to Seashore rather quickly.
	It&apos;s a dumbed-down image editor that reuses source code from the <abbr title="GNU Image Manipulation Program">GIMP</abbr>.
	While it has less options than the <abbr title="GNU Image Manipulation Program">GIMP</abbr>, it&apos;s also made specifically to run well on OS X, though that&apos;s the <strong>*only*</strong> system it runs on.
</p>
<p>
	I also got started with Web languages, including <abbr title="Extensible Hypertext Markup Language">XHTML</abbr> and <abbr title="Cascading Style Sheets">CSS</abbr>.
	My first website was hosted on this old iMac, and I used OS X&apos;s built-in Apache and <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> instances to do it, at first.
	These instances were hopelessly entangled with the system though, so when I discovered how outdated my <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> instance was, and that my Apache instance was too old for then-modern <abbr title="PHP: Hypertext Preprocessor">PHP</abbr>, I ended up having to compile and install a second copy of both <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> and Apache, leaving the system-included ones installed but disabled.
</p>
<p>
	I often found my iMac wasn&apos;t powerful enough to do the things I wanted it to do.
	I couldn&apos;t even watch videos on it, for example, so when I started taking one of the first <abbr title="massive open online course">MOOC</abbr>s in the world, the machine wasn&apos;t up to the task.
	By then, I&apos;d gotten a desktop Mac, which I mainly used as a server, but it couldn&apos;t connect to Wi-Fi, so it had to live under Summer&apos;s desk, where the router was housed.
	So I typically didn&apos;t have access to this machine physically, and it ran headless most of the time.
	I barely got her to let me use it to take the course, so I wasn&apos;t going to be able to get her to let me use it for anything else.
	At some point, my pibling gave me a pair of old laptops, so I&apos;d have something powerful enough to use, but also Wi-Fi compatible.
	The catch was that they both ran Windows.
	<strong>*That*</strong> wasn&apos;t going to happen.
	So I looked into how to install OS X on them, planning to buy a copy of the system for at least one of the machines.
	What I found was that due to the wording of the OS X license agreement, installing OS X on non-Apple hardware is illegal!
	It&apos;s possible, and people do it, but Apple makes you agree that you don&apos;t own your copy of it, and because they now own it after you agree to that, they can restrict what hardware it can be installed on.
	I could have done it, and no one would have to know.
	I would probably have even needed to download a modified copy of the system, just to make it run, meaning that Apple&apos;s ridiculous terms would have cost them that money, whether I went with OS X or not.
	However, it very much felt like Apple was telling me - and everyone else that had non-Apple hardware - that they didn&apos;t want us as customers, even of their software.
	And if Apple didn&apos;t even want me, I&apos;d find someone that did.
</p>
<p>
	I&apos;d heard of a system called Linux.
	I knew pretty much nothing besides the name and that the developers were giving it away gratis.
	Oh, but also that it wasn&apos;t Windows.
	That was it&apos;s most important feature, in my book, regardless of whatever else it was good for.
	So I tried to find it online
	Much to my surprise, I found that Linux wasn&apos;t a single operating system, but a class of similar operating systems that share most of their code.
	But each one was a bit different.
	I tried to figure out which one would work best, but there wasn&apos;t any way to see for myself.
	I eventually had to choose one, and take the plunge.
	I decided on Ubuntu, of which version 12.04 had just been released.
	It seemed that the consensus was that this one was user-friendly.
	I needed a system that I could figure out.
	When I went to download it, the website was bragging that one of its highly-attractive features was the lack of license keys you have to bother inputting.
	I saw that obviously, it was taking a jab at Windows.
	But I&apos;d come from the OS X world, and we didn&apos;t have to deal with license keys either.
	A lack of license keys, while difinitely a very good thing, wasn&apos;t a new experience for me.
</p>
<p>
	Installation went well.
	It was as easy as installing OS X, which I&apos;d done several times in order to wipe my iMac when something went wrong with it.
	The interface was ... less than ideal.
	But I could deal.
	At least I wasn&apos;t on Windows.
	That&apos;s what I wasn&apos;t able to forget.
	I&apos;d used one of the laptops without wiping Windows for a few weeks before I had time to look into installing OS X on them and I tried to figure out which Linux distribution to install.
	Even though I didn&apos;t like the interface of this one, not having to deal with the frequent freezes and crashes I&apos;d been dealing with on Windows clearly put this system above the alternative, which was to keep Windows on the machine.
	I&apos;d committed to Ubuntu, and I was going to make it work.
	I&apos;d later learn its interface to be called &quot;Unity&quot;.
	And despite Unity&apos;s awkwardness, Ubuntu performed literally every feat I needed from my computer, including basic stability, which is something Windows was never able to provide me.
	It also had a leg up on OS X.
	To start with, it ran modern software, while my OS X installation had been too old for most modern software.
	And to sweeten the pot, it came with a package manager that would install whatever I wanted, without my needing to go search the web for it.
	How cool is that?
</p>
<p>
	About a week later, it dawned on me.
	I didn&apos;t <strong>*have*</strong> to commit to Ubuntu.
	It wasn&apos;t like I had to buy everything I tried.
	It wasn&apos;t like with each jump to a new Linux distribution, I was having to shell out for another operating system, which I wouldn&apos;t be able to afford.
	I could actually try out my different options, no strings attached.
	It was a huge turning point for me; it was like an entire world of possibilities had just opened up to me.
	In my research, I&apos;d learned that Ubuntu was a fork of Debian.
	Maybe Debian would provide me a better experience.
	So I installed Debian 6.
	It seemed to break on me rather easily.
	I find that really odd though, as Debian&apos;s one of the most-stable systems there are, at least these days.
	Was it really that bad at version 6?
	I&apos;m not sure what the issue was.
	Next, I tried Linux Mint.
	I think it was at version 13, at the time, but I can&apos;t say for sure.
	That seemed to work well enough for a time, but also seemed to have issues.
	Did something break?
	Or was it the application menu problems?
	I don&apos;t recall; it&apos;s been so long.
	In any case, I decided to switch again.
	By this time, I&apos;d discovered the Ubuntu variants, so I went with Xubuntu.
	That one worked fantastically for me for years.
	It had everything I&apos;d liked about Ubuntu, but without the unintuitive Unity interface.
	I&apos;m honestly not sure what version of Xubuntu I started with, but given that it&apos;s just Ubuntu with a different set of default packages, it doesn&apos;t really matter anyway.
</p>
<p>
	Eventually, I came across the <abbr title="Free Software Foundation">FSF</abbr>.
	I found them through one of their licenses, the <abbr title="GNU&apos;s Not Unix">GNU</abbr> <abbr title="General Public License">GPL</abbr>.
	I&apos;d seen this license even in the OS X world.
	Applications such as the <abbr title="GNU Image Manipulation Program">GIMP</abbr> and Seashore were under this license.
	I&apos;d seen other licenses I&apos;d thought of similarly too, such as the ones Apache and <abbr title="PHP: Hypertext Preprocessor">PHP</abbr> were licensed under.
	I&apos;d always appreciated the mentality that the developers wanted to allow users to do whatever they liked with the code, so long as they allowed others to do the same with their changes, or in the case of some of these licenses, not even with the restriction that the new developers be as kind as the old developers.
	This sort of desire to share your efforts with others you don&apos;t even know personally always made me feel good, when I ended up installing software with a popup asking me to agree to such a license.
	And now I&apos;d found an organisation whose sole purpose was to spread such a philosophy.
	I learned form them that such licensing isn&apos;t simply a kind and optional gesture.
	It&apos;s outright mandatory for releasing ethical software.
	Knowledge, including code, cannot be owned, and copyright law is a blight on our legal system.
	I switched to Trisquel, an <abbr title="Free Software Foundation">FSF</abbr>-endorsed distribution.
	I was an <abbr title="Free Software Foundation">FSF</abbr> donor, and I should put my efforts where my money was.
	I tried other <abbr title="Free Software Foundation">FSF</abbr>-endorsed distributions, but found that gNewSense&apos;s software was too old, Dragora&apos;s installer didn&apos;t seem to function, and the installers for the other <abbr title="Free Software Foundation">FSF</abbr>-endorsed distributions were too difficult to use.
	By this time, my philosophy about installation was that you shouldn&apos;t need a set of instructions to read outside the installer, as your machine would be tied up with the installer itself, with no way to search the Web for the instructions.
	Therefore, command-line-based installers were not acceptable for general users, only for advanced users.
	I also believed that I needed to run a system fit for people of any skill level, so I could recommend that system when opportunities arrised.
</p>
<p>
	I later learned that the <abbr title="Free Software Foundation">FSF</abbr> was full of garbage, and even contradicted the philosophy I&apos;d learned form them.
	In fact, the philosophy I&apos;d learned form them wasn&apos;t even the one they&apos;d tried to teach me.
	The <abbr title="Free Software Foundation">FSF</abbr> is only concerned about the practical aspect of freedom.
	They don&apos;t care about the principle of the matter.
	As such, they only care about freedom when it comes to software.
	If you don&apos;t have access to the source code, you don&apos;t know what the software is having your computer do.
	If you don&apos;t have permission to modify the source code, you don&apos;t control your own computer.
	And if you&apos;re not allowed to redistribute your changes, the general public can&apos;t have dependable and trustworthy software.
	However, the <abbr title="Free Software Foundation">FSF</abbr> doesn&apos;t care about media freedom, and actually actively oppose it by releasing non-free non-software.
	Media freedom is important too though.
	Ideas cannot be owned, and when media copyrights restrict what we can do with our media, it&apos;s censorship.
	Sure, we can control our computers if we have free software.
	But without free media, it&apos;s control of our minds and our self-expression that we lack.
	How is that any less important?
	So I stopped donating to the <abbr title="Free Software Foundation">FSF</abbr>, and wrote them off.
	I switched away from Trisquel, too.
	I couldn&apos;t find a single statement on their website saying they had any interest in keeping non-free non-software out of their distribution, and keeping non-free non-software out of distributions was specifically mentioned by the <abbr title="Free Software Foundation">FSF</abbr> as not being a requirement for their endorsement.
	You know who <strong>*did*</strong> make such a commitment though?
	Debian.
</p>
<p>
	So I went back to Debian.
	Debian and the <abbr title="Free Software Foundation">FSF</abbr> were in disagreement as to what constitutes a free operating system.
	The Debian team was of the opinion that by just saying something wasn&apos;t a part of their distribution, it wasn&apos;t a part of their distribution.
	It was as simple as that.
	The <abbr title="Free Software Foundation">FSF</abbr> believed though that if the non-free components were hosted on the same servers as the main system, and if the non-free components were documented in the same official manual as the main system, they were a part of the distribution.
	Personally, I disagreed with both sides.
	You can&apos;t make something magically not a part of your system just by saying it&apos;s not.
	At the same time though, multiple things can be hosted on the same server without them being the same thing.
	Official and unofficial things can even be hosted on a server together.
	And the documentation?
	Seriously?
	The system&apos;s documentation is completely irrelevant to what is actually a part of the system and not.
	However, synaptic was a part of Debian, and this wasn&apos;t denied by anyone.
	And synaptic treated three repos as special; they could be turned on and off vie checkboxes.
	These were the <code>main</code>, <code>contrib</code>, and <code>non-free</code> repos.
	Synaptic allows you to add arbitrary repos, and that&apos;s just fine, but because these three were given special treatment, they were, in my eyes, obviously all a part of Debian.
	So Debian wasn&apos;t fully free.
	It was the closest I could find though, and because all the non-free stuff was quarantined in optional repositories, it was easy to run a fully-free Debian instance.
	Another disagreement between the Debian developers and the <abbr title="Free Software Foundation">FSF</abbr> though was an incredibly deciding factor for me: not just the definition of what is and is not a part of the distribution, but what is and is not free.
	Debian&apos;s definition treated all components as needing identical freedoms.
	The <abbr title="Free Software Foundation">FSF</abbr> arbitrarily singles out the things they believe freedom is useful for, and strategically don&apos;t require freedom for things such as manuals, so they can insert their propaganda into them and be sure that propaganda, which is an anti-feature because of its unremovability, cannot be removed.
	Seriously, I&apos;d happily have their propaganda if it wasn&apos;t forced.
	It&apos;s just like having software that can be modified, except that you&apos;re not allowed to take out the license key verification or something.
	You claim it to be free software, but it clearly isn&apos;t because you can&apos;t remove the noxious part.
	It&apos;s the same with <abbr title="GNU &quot;Free&quot; Documentation License">GFDL</abbr>-licensed works.
	And while the <abbr title="Free Software Foundation">FSF</abbr> refuses to see that, the Debian developers do, and they don&apos;t include these noxious manuals in their distribution.
	Between Debian quarantining non-free components and making a commitment to treating all components, not just software, as needing to be free, Debian was a system I could install without fear that I might accidentally bring in a non-free component via some dependency chain.
	So that&apos;s what I did.
	Debian became the only system I&apos;d allow on my machines.
</p>
<p>
	The Debian team later fixed my main freedom-related complaint, the special treatment of those three repositories.
	I mean, <code>main</code> obviously still gets special treatment in that when you install the system, the system&apos;s already configured to use that repo.
	But the other two are no longer something I&apos;d consider a part of the system.
	Debian has become, in my eyes, a free system.
	Well, mostly.
	Debian accepts licenses that disallow modification of the source code so long as the source can be distributed along with patches.
	From a standpoint of principle, I consider these pieces of software to be non-free, as they disallow modification of the source code.
	But from practical standpoint, these pieces of software are &quot;free enough&quot;, and it&apos;s worth ignoring the bizarre licensing terms just to have an operating system I can use.
</p>
<p>
	So that&apos;s where I am today.
	I use Debian because it&apos;s one of two free operating systems I know of.
	I also use PureOS though, which is a fork of Debian, because it came preinstalled on my Librem 15.
	I&apos;ve found no indication that Purism specifically makes an effort to keep non-free non-software out of the repo, but there doesn&apos;t seem to be a reason why they&apos;d add it to the Debian base they&apos;re starting with.
	Trisquel, on the other hand, is derived from Ubuntu, which is known to include non-free components.
	And as Purism is working to develop free hardware specifications, it seems reasonable to trust them for the time being.
	Their laptops are a pain to work with because of the lack of mouse buttons, but they&apos;re clearly trying to do good in the world.
</p>
		<hr/>
		<p>
			Copyright Â© 2019 Alex Yst;
			You may modify and/or redistribute this document under the terms of the <a rel="license" href="/license/gpl-3.0-standalone.xhtml"><abbr title="GNU&apos;s Not Unix">GNU</abbr> <abbr title="General Public License version Three or later">GPLv3+</abbr></a>.
			If for some reason you would prefer to modify and/or distribute this document under other free copyleft terms, please ask me via email.
			My address is in the source comments near the top of this document.
			This license also applies to embedded content such as images.
			For more information on that, see <a href="/en/a/licensing.xhtml">licensing</a>.
		</p>
		<p>
			<abbr title="World Wide Web Consortium">W3C</abbr> standards are important.
			This document conforms to the <a href="https://validator.w3.org./nu/?doc=https%3A%2F%2Fy.st.%2Fen%2Fweblog%2Fmemories%2FDebian.xhtml"><abbr title="Extensible Hypertext Markup Language">XHTML</abbr> 5.2</a> specification and uses style sheets that conform to the <a href="http://jigsaw.w3.org./css-validator/validator?uri=https%3A%2F%2Fy.st.%2Fen%2Fweblog%2Fmemories%2FDebian.xhtml"><abbr title="Cascading Style Sheets">CSS</abbr>3</a> specification.
		</p>
	</body>
</html>

