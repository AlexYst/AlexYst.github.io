<?xml version="1.0" encoding="utf-8"?>
<!--
                                                                                     
 h       t     t                ::       /     /                     t             / 
 h       t     t                ::      //    //                     t            // 
 h     ttttt ttttt ppppp sssss         //    //  y   y       sssss ttttt         //  
 hhhh    t     t   p   p s            //    //   y   y       s       t          //   
 h  hh   t     t   ppppp sssss       //    //    yyyyy       sssss   t         //    
 h   h   t     t   p         s  ::   /     /         y  ..       s   t    ..   /     
 h   h   t     t   p     sssss  ::   /     /     yyyyy  ..   sssss   t    ..   /     
                                                                                     
	<https://y.st./>
	Copyright Â© 2020 Alex Yst <mailto:copyright@y.st>

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program. If not, see <https://www.gnu.org./licenses/>.
-->
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<base href="https://y.st./en/weblog/2020/08-August/23.xhtml"/>
		<title>There are likely four or five correct answers ... &lt;https://y.st./en/weblog/2020/08-August/23.xhtml&gt;</title>
		<link rel="icon" type="image/png" href="/link/CC_BY-SA_4.0/y.st./icon.png"/>
		<link rel="stylesheet" type="text/css" href="/link/main.css"/>
		<script type="text/javascript" src="/script/javascript.js"/>
		<meta name="viewport" content="width=device-width"/>
	</head>
	<body>
<nav>
	<p>
		<a href="/en/coursework/">Coursework</a> |
		<a href="/en/take-down/">Take-down requests</a> |
		<a href="/en/">Home</a> |
		<a href="/en/a/about.xhtml">About</a> |
		<a href="/en/a/contact.xhtml">Contact</a> |
		<a href="/a/canary.txt">Canary</a> |
		<a href="/en/URI_research/"><abbr title="Uniform Resource Identifier">URI</abbr> research</a> |
		<a href="/en/opinion/">Opinions</a> |
		<a href="/en/law/">Law</a> |
		<a href="/en/recipe/">Recipes</a> |
		<a href="/en/a/links.xhtml">Links</a> |
		<a href="/en/weblog/2020/08-August/23.xhtml.asc">{this page}.asc</a>
	</p>
	<hr/>
	<p>
		Weblog index:
		<a href="/en/weblog/memories">Memories</a> |
		<a href="/en/weblog/"><abbr title="American Standard Code for Information Interchange">ASCII</abbr> calendars</a> |
		<a href="/en/weblog/index_ol_ascending.xhtml">Ascending list</a> |
		<a href="/en/weblog/index_ol_descending.xhtml">Descending list</a>
	</p>
	<hr/>
	<p>
		Jump to entry:
		<a href="/en/weblog/2015/03-March/07.xhtml">&lt;&lt;First</a>
		<a rel="prev" href="/en/weblog/2020/08-August/22.xhtml">&lt;Previous</a>
		<a rel="next" href="/en/weblog/2020/08-August/24.xhtml">Next&gt;</a>
		<a href="/en/weblog/latest.xhtml">Latest&gt;&gt;</a>
			</p>
			<hr/>
</nav>
		<header>
			<h1>There are likely four or five correct answers ...</h1>
			<p>Day 01996: <time>Sunday, 2020 August 23</time></p>
		</header>
<img src="/img/CC_BY-SA_4.0/y.st./weblog/2020/08/23.jpg" alt="A marijuana tube" class="framed-centred-image" width="649" height="480"/>
<section id="marijuana">
	<h2>Marijuana</h2>
	<p>
		One of my customers tonight put marijuana in my tip jar.
		Seriously?
		This is the second time this has happened, though this time, it was contained in a plastic tube instead of just being dumped directly into the dirty tip jar.
		I&apos;m not sure why customers are giving me weed though.
		Why do they just assume I&apos;m a user?
		Do they assume <strong>*everyone*</strong> uses?
		Seriously, if they tipped me a mere penny, it&apos;d be more appreciated than drugs.
		A penny, I can spend.
		A tube of marijuana is just trash to me, taking up space.
	</p>
	<p>
		Anyway, my enby workmate was on the clock today, and I thought I&apos;d remembered them mentioning using the stuff.
		So I brought it up and mentioned that I don&apos;t even use the stuff.
		Thankfully, they took the hint, and said they&apos;d be happy to take the stuff off my hands.
		Perfect.
		I feel bad throwing away something someone else would go off and buy more of if I didn&apos;t.
		It&apos;s to the point that I&apos;d keep it in my apartment unused, not really feeling right throwing it away.
		Getting rid of it on-the-spot to someone that&apos;d later not have to buy as much of it was the best option I had.
		Another workmate I&apos;d give it to if they were around would be the one that took me to that health food store.
		Those two are the only two workmates I have that I can think of off the top of my head that consistently even treat me with any basic, human respect.
		And they both happen to use the stuff.
	</p>
</section>
<section id="Minetest">
	<h2>Minetest</h2>
	<img src="/img/CC_BY-SA_3.0/minetest.net./weblog/2020/08/23.png" alt="My temporary base camp, as seen at night from above" class="framed-centred-image" width="1024" height="600"/>
	<img src="/img/CC_BY-SA_4.0/y.st./weblog_map/2020/08/23.png" alt="The world map" class="framed-centred-image" width="921" height="912"/>
	<p>
		I thought about going back to trying brute force for the seed problem, not because it would <strong>*at all*</strong> be an intelligent or efficient solution to the problem, but because it&apos;d be fun to have a set of files that could be searched to convert any numeric seed to a string seed in the future.
		I needed to know how many seeds to store in each file though.
		I wanted to have as few files as feasible, have the cuts between files be in sensible spots, and have the files still be small enough that they don&apos;t lock up my machine when I look at them in a text editor.
		To do that, I calculated the length of each entry (33 bytes at most, with the maximum length being used for most entries) then planned to check at a few clean cut-off points how large that would make the files.
		The first cutting point I checked though put the file size at over <strong>*two terabytes*</strong>.
		My hard drive isn&apos;t even that large, not to mention that <code>grep</code> probably isn&apos;t going to have a good time with a file that large.
		I can&apos;t search it to look up seeds.
		And that&apos;s only the first file!
		All the files put together would have an astronomical size, regardless of where I decide to cut the data.
		Keeping lookup files simply isn&apos;t feasible, so brute force has no use in solving this problem, as far as I can tell.
	</p>
	<p>
		I started to get curious though.
		I&apos;m basically trying to find a seed in base 66, but the number of seeds available is best expressed in base 2.
		Ten characters wasn&apos;t enough, statistically.
		Eleven was by far enough though.
		There would probably be multiple up-to-eleven-long base 66 seeds for every 64-bit seed.
		So I ran a quick, imprecise calculation and found that there are likely about 5.6 solutions to the problem.
		Wow.
		Five or six solutions.
		Impressive.
		I wanted a more-precise estimation though, just because I&apos;m not even sure where to start on finding even one solution, and having a precise estimation of the number of solutions would make me feel <em>a little</em> like I had something to show in terms of progress.
		My calculator application of course couldn&apos;t provide any measure of precision at such high numbers.
		I figured I might as well perform some calculations partly by hand and see what I came up with while mulling over the problem a bit longer.
	</p>
	<p>
		Accounting for the 66-character alphabet I&apos;d limited myself to, the fact that the zero-length seed is interpreted as no seed and provokes the engine into providing a random seed, the fact that I&apos;m allowing a seed of any length up to and including eleven characters long, and the fact that decimal and hexadecimal seeds are treated differently than other seeds and no decimal or hexadecimal seed within that length limitation is a solution to the problem, there are 105105673447060873654 seeds to check.
		Yes, I&apos;ve checked many of them already, but statistically speaking, the ones I&apos;ve checked don&apos;t change the odds.
		While calculating the number of seeds to rule out, something occurred to me.
		While Minetest is hard-coded to treat seeds beginning in <code>0x</code> (lower-case ex) as hexadecimal seeds as long as the rest of the characters are hexadecimal characters but treat seeds beginning in <code>0X</code> (upper-case ex) as string seeds, it doesn&apos;t make a difference if the rest of the characters are upper or lower case.
		I experimented and checked that theory too.
		I was right.
		So for each possible seed length, I needed to remove 10<sup><var>length</var></sup> seeds for the decimal seeds, but 22<sup><var>length</var>-2</sup> seeds - not 16<sup><var>length</var>-2</sup> seeds - for the hexadecimal seeds.
		Anyway, 105105673447060873654 strings divided theoretically evenly between 2<sup>64</sup> numeric seeds gives us 5 + 6435976539256557787 / 2<sup>63</sup>.
		I was able to cancel out one order of magnitude from the denominator, making it 2<sup>63</sup> instead of 2<sup>64</sup>, but I could reduce no more than that if we want to be precise.
		Of course, the closest answer that&apos;s actually of value to us is &quot;five or six&quot;, so we don&apos;t honestly need to reduce any further.
		None of those calculations were of any value beyond letting me feel like I&apos;d actually gotten something done for the day.
	</p>
	<p>
		I&apos;m not even sure what I was hoping to accomplish, but I continued experimenting with seed entry.
		I found that all Unicode characters above character #ff get mangled when pasted into the Minetest seed slot.
		These characters get converted into what looks like escape sequences representing the characters, except that no escape syntax is actually used by the seed processor, as far as I&apos;m aware.
		Furthermore, any string containing characters within the #ff limit but outside <abbr title="American Standard Code for Information Interchange">ASCII</abbr> range get converted to the string <code>&lt;invalid wstring&gt;</code>.
		Experiments show that this happens before the seed is converted to an integer, not after, so the same string can be used again next time Minetest is loaded with no differences in output.
		That&apos;s convenient, as it means it&apos;s stable and predictable.
		Lastly, most control characters in the <abbr title="American Standard Code for Information Interchange">ASCII</abbr> range can&apos;t even be pasted into the seed slot, though it seemed a few can.
		Experimenting with each control character individually turned up a list of three that work, none of which are all that notable: #09 (tab), #0A (line feed), and #0D (carriage return)
		It was a bit of a pain to figure out exactly which ones work and which don&apos;t, because Minetest doesn&apos;t interact with the clipboard properly, often pasting the last thing that was in the clipboard the first time you paste, then switching to the updated clipboard next time.
		It doesn&apos;t interact with the clipboard consistently though, and sometimes actually works correctly instead of displaying the behaviour above, so measures must be taken to mark each string with identifying characters to determine which string is being pasted even after the control character to be tested has potentially been stripped.
		In any case, one of the main reasons I was limiting my character set was because I thought it&apos;d be be an overwhelming task to account for all Unicode characters.
		Minetest can&apos;t even handle all Unicode characters in sees though.
		Accounting for the printable <abbr title="American Standard Code for Information Interchange">ASCII</abbr> characters, the space, and these three basic control characters, we have a list of 98 characters that can be used in Minetest seeds.
		With such a limited character set, I might as well widen my search to include all characters Minetest will allow.
		That also allows me to drop a character off my target length, so I&apos;m now looking for a seed only ten characters long.
		Running running all my calculations again, I found the number of seeds to check to be 82549623720038636502, and the estimated number of correct ones to be 4 + 4381323712600215021 / 2<sup>63</sup>.
		So now there&apos;s probably four or five correct answers, leaning slightly more toward there likely being four, rather than five.
	</p>
</section>
		<hr/>
		<p>
			Copyright Â© 2020 Alex Yst;
			You may modify and/or redistribute this document under the terms of the <a rel="license" href="/license/gpl-3.0-standalone.xhtml"><abbr title="GNU&apos;s Not Unix">GNU</abbr> <abbr title="General Public License version Three or later">GPLv3+</abbr></a>.
			If for some reason you would prefer to modify and/or distribute this document under other free copyleft terms, please ask me via email.
			My address is in the source comments near the top of this document.
			This license also applies to embedded content such as images.
			For more information on that, see <a href="/en/a/licensing.xhtml">licensing</a>.
		</p>
		<p>
			<abbr title="World Wide Web Consortium">W3C</abbr> standards are important.
			This document conforms to the <a href="https://validator.w3.org./nu/?doc=https%3A%2F%2Fy.st.%2Fen%2Fweblog%2F2020%2F08-August%2F23.xhtml"><abbr title="Extensible Hypertext Markup Language">XHTML</abbr> 5.2</a> specification and uses style sheets that conform to the <a href="http://jigsaw.w3.org./css-validator/validator?uri=https%3A%2F%2Fy.st.%2Fen%2Fweblog%2F2020%2F08-August%2F23.xhtml"><abbr title="Cascading Style Sheets">CSS</abbr>3</a> specification.
		</p>
	</body>
</html>

